USE [RAF]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- eat the error. Don't know if user has access to system views to check if it exists
begin try
drop table [RAF].[dbo].[TableSchemas]
end try
begin catch
end catch

CREATE TABLE [RAF].[dbo].[TableSchemas](
ElementName varchar(512) not null,
FriendlyName varchar(512) not null,
[is_hidden] [bit] NULL,
[column_ordinal] [int] NULL,
[name] [nvarchar](128) NULL,
[is_nullable] [bit] NULL,
[system_type_id] [int] NULL,
[system_type_name] [nvarchar](128) NULL,
[max_length] [smallint] NULL,
[precision] [tinyint] NULL,
[scale] [tinyint] NULL,
[collation_name] [nvarchar](128) NULL,
[user_type_id] [int] NULL,
[user_type_database] [nvarchar](128) NULL,
[user_type_schema] [nvarchar](128) NULL,
[user_type_name] [nvarchar](128) NULL,
[assembly_qualified_type_name] [nvarchar](4000) NULL,
[xml_collection_id] [int] NULL,
[xml_collection_database] [nvarchar](128) NULL,
[xml_collection_schema] [nvarchar](128) NULL,
[xml_collection_name] [nvarchar](128) NULL,
[is_xml_document] [bit] NULL,
[is_case_sensitive] [bit] NULL,
[is_fixed_length_clr_type] [bit] NULL,
[source_server] [nvarchar](128) NULL,
[source_database] [nvarchar](128) NULL,
[source_schema] [nvarchar](128) NULL,
[source_table] [nvarchar](128) NULL,
[source_column] [nvarchar](128) NULL,
[is_identity_column] [bit] NULL,
[is_part_of_unique_key] [bit] NULL,
[is_updateable] [bit] NULL,
[is_computed_column] [bit] NULL,
[is_sparse_column_set] [bit] NULL,
[ordinal_in_order_by_list] [smallint] NULL,
[order_by_is_descending] [bit] NULL,
[order_by_list_length] [smallint] NULL,
[error_number] [int] NULL,
[error_severity] [int] NULL,
[error_state] [int] NULL,
[error_message] [nvarchar](2048) NULL,
[error_type] [int] NULL,
[error_type_desc] [nvarchar](30) NULL
) ON [PRIMARY]
GO

declare @xml nvarchar(max)
declare @query nvarchar(max)
declare @select nvarchar(max)
declare @ElementName varchar(512)
declare @FriendlyName varchar(512)


set @ElementName='DW_CLNDR_DIM'
set @FriendlyName='DateDim'
set @xml='SELECT        Date(CLNDR_DT) AS CLNDR_DT, CLNDR_DT_EPOCH, CLNDR_DT_FL_NM, CLNDR_DT_ABBR, CLNDR_CACHE_DT, YR_NUM, MTH_OF_YR_NUM, MTH_OF_YR_ABBR, MTH_OF_YR_NM, YR_AND_MTH_NUM, YR_AND_MTH_ABBR, &#xD;&#xA;                         YR_AND_MTH_NM, QTR_OF_YR_NUM, QTR_OF_YR_ABBR, YR_AND_QTR_NUM, YR_AND_QTR_ABBR, DY_OF_YR_NUM, DY_OF_MTH_NUM, DY_OF_WK_NUM, DY_OF_WK_ABBR, DY_OF_WK_NM, &#xD;&#xA;                         WK_OF_YR_NUM, PR_YR_NUM, PR_MTH_OF_YR_NUM, PR_MTH_OF_YR_ABBR, PR_MTH_OF_YR_NM, PR_YR_AND_MTH_NUM, PR_YR_AND_MTH_ABBR, PR_YR_AND_MTH_NM, PR_QTR_OF_YR_NUM, &#xD;&#xA;                         PR_QTR_OF_YR_ABBR, PR_YR_AND_QTR_NUM, PR_YR_AND_QTR_ABBR, FSCL_YR_NUM, FSCL_YR_BGN_DT, FSCL_YR_END_DT, FSCL_QTR_NUM, FSCL_QTR_ABBR, FSCL_QTR_BGN_DT, &#xD;&#xA;                         FSCL_QTR_END_DT, FSCL_MTH_NUM&#xD;&#xA;FROM            DW.CLNDR_DIM WHERE YR_NUM &gt;0'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LDW_PTNT_DIM'
set @FriendlyName='PatientDim'
set @xml='SELECT PTNT_SK, SRC_PTNT_ID, MPI_NUM &#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN BRTH_TS &lt; '01/01/1900' THEN NULL ELSE date(BRTH_TS) &#xD;&#xA;END As BRTH_TS&#xD;&#xA;       , MRTL_STS_CDS&#xD;&#xA;       , MRTL_STS_DESC&#xD;&#xA;       , CITY&#xD;&#xA;       , CNTY_CDS , CNTY_DESC&#xD;&#xA;       , ST_PRV_CDS&#xD;&#xA;       , ST_PRV_NM , CRNT_PCP_PROVDR_SK&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CNTRY_NM='US' THEN SUBSTR(PSTL_CDS,1,5)ELSE &#xD;&#xA;NULL END as PSTL_CDS&#xD;&#xA;       , CNTRY_CDS, CNTRY_NM&#xD;&#xA;       , HME_PH_AREA_CDS&#xD;&#xA;       , HME_PH_EXCHNG_CDS&#xD;&#xA;       , WRK_PH_AREA_CDS&#xD;&#xA;       , WRK_PH_EXCHNG_CDS&#xD;&#xA;       , CASE WHEN LIV_STS_CDS &lt; 0 THEN NULL ELSE LIV_STS_CDS END AS LIV_STS_CDS&#xD;&#xA;       , LIV_STS_DESC&#xD;&#xA;       , Date(DTH_TS) As DTH_TS&#xD;&#xA;       , SEX_CDS, SEX_DESC&#xD;&#xA;       , PRMY_LANG_CDS&#xD;&#xA;       , PRMY_LANG_DESC&#xD;&#xA;       , PRMY_RACE_CDS&#xD;&#xA;       , PRMY_RACE_DESC&#xD;&#xA;       , SCND_RACE_CDS&#xD;&#xA;       , SCND_RACE_DESC&#xD;&#xA;       , THRD_RACE_CDS&#xD;&#xA;       , THRD_RACE_DESC&#xD;&#xA;       , FOURTH_RACE_CDS&#xD;&#xA;       , FOURTH_RACE_DESC&#xD;&#xA;       , FIFTH_RACE_CDS&#xD;&#xA;       , FIFTH_RACE_DESC&#xD;&#xA;       ,  &#xD;&#xA;CASE &#xD;&#xA;WHEN MULTI_RACIAL=0 THEN 'No' WHEN MULTI_RACIAL=1 THEN 'Yes' ELSE &#xD;&#xA;NULL END AS MULTI_RACIAL  ,&#xD;&#xA;ETHNCTY_CDS&#xD;&#xA;       , ETHNCTY_DESC&#xD;&#xA;       , RELG_CDS&#xD;&#xA;       , RELG_DESC&#xD;&#xA;       , SMKE_STS_CDS&#xD;&#xA;       , SMKE_STS_DESC&#xD;&#xA;       , HI_LEVL_OF_EDU_CDS&#xD;&#xA;       , HI_LEVL_OF_EDU_DESC&#xD;&#xA;       , PRMY_PAYOR_CDS&#xD;&#xA;       , PRMY_PAYOR_NM&#xD;&#xA;       , PRMY_FNCL_CLASS_CDS&#xD;&#xA;       , PRMY_FNCL_CLASS_DESC      &#xD;&#xA;       , MTHR_PTNT_BABY_NUM   &#xD;&#xA;       , AGE_IN_YRS As Age, &#xD;&#xA;CASE &#xD;&#xA;WHEN (AGE_IN_YRS&lt;0 &#xD;&#xA;OR AGE_IN_YRS&gt; 120) THEN NULL ELSE AGE_IN_YRS &#xD;&#xA;END AS AGE_FACT, &#xD;&#xA;CASE &#xD;&#xA;WHEN AGE_IN_YRS=0 THEN 0 &#xD;&#xA;WHEN (AGE_IN_YRS&lt;0 &#xD;&#xA;OR AGE_IN_YRS&gt; 120) THEN NULL ELSE Log(AGE_IN_YRS)&#xD;&#xA;END As Age_Log, SYS_CRT_TS AS REG_TS, &#xD;&#xA;CASE &#xD;&#xA;WHEN BRTH_TS &lt; '01/01/1900' OR BRTH_TS &gt; SYS_CRT_TS THEN NULL ELSE DATE_PART('year', SYS_CRT_TS) - DATE_PART('year', BRTH_TS)&#xD;&#xA;END AS AGE_AT_REG,&#xD;&#xA;CASE &#xD;&#xA;WHEN AVAIL_IND= 0 THEN 'NO' WHEN AVAIL_IND= 1 THEN 'YES' END AS AVAIL_IND&#xD;&#xA;, CASE WHEN CARLN_EMP_HLTH_PLN_IND = 0 THEN 'NO' WHEN CARLN_EMP_HLTH_PLN_IND= 1 THEN 'YES' END AS CARLN_EMP_HLTH_PLN_IND, ACTIVE&#xD;&#xA;FROM CUBESPRD.PTNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DW_ENCNT_DIM'
set @FriendlyName='EncounterDim'
set @xml='SELECT ENCNT_SK,&#xD;&#xA;SRC_ENCNT_ID,&#xD;&#xA;PTNT_STS_CDS, &#xD;&#xA;ENCNT_TYPE_CDS, &#xD;&#xA;LEVL_OF_CARE_CDS,&#xD;&#xA;PTNT_BSE_CLSS_CDS, &#xD;&#xA;CASE WHEN TRAUMA_IND= 0 THEN 'NO' WHEN TRAUMA_IND= 1 THEN 'YES' ELSE NULL END AS TRAUMA_IND,&#xD;&#xA;AGE_YRS_AT_ENCNT,&#xD;&#xA;AGE_MNTHS_AT_ENCNT,&#xD;&#xA;AGE_DYS_AT_ENCNT,&#xD;&#xA;PRD_LINE_CDS,&#xD;&#xA;BILLING_CLASS_CDS,&#xD;&#xA;DEPT_CDS&#xD;&#xA;--, SECTION_CDS&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DW_ENCNT_FACT'
set @FriendlyName='EncounterFact'
set @xml='SELECT ENCNT_FACT_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , DEPT_SK&#xD;&#xA;       , ENCNT_DT&#xD;&#xA;       , AGE_YRS_AT_ENCNT&#xD;&#xA;       , AGE_MNTHS_AT_ENCNT&#xD;&#xA;       , AGE_DYS_AT_ENCNT&#xD;&#xA;       , ENCNT_WAIT_IN_DAYS&#xD;&#xA;  FROM CUBESPRD.ENCNT_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DepartmentDim'
set @FriendlyName='DepartmentDim'
set @xml='SELECT     DEPT_SK, SRC_DEPT_ID, DEPT_NM, DEPT_ABBR, ADDR, CITY, ST_PRV_CDS, ST_PRV_NM, ST_PRV_ABBR, PSTL_CDS, PH_NUM, RSTCT_IND, SPCLY_CDS, SPCLY_NM, PRFSNL_BILLNG_CL_CDS, PRFSNL_BILLNG_CL_NM, LO_CDS, LO_NM, SRVC_AREA_CDS, &#xD;&#xA;                  SRVC_AREA_NM, ALT_SRVC_AREA_CDS, ALT_SRVC_AREA_NM, ICU_DEPT_IND, PCU_DEPT_IND, LOC_TYPE_CDS, LOC_TYPE_DESC, FCM_Region_ID, FCM_Region_Name&#xD;&#xA;FROM        cubesprd.DEPT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientDim'
set @FriendlyName='InpatientDim'
set @xml='SELECT   I.INPTNT_VST_SK&#xD;&#xA;       , IF.ENCNT_SK&#xD;&#xA;       , I.SRC_ENCNT_ID&#xD;&#xA;       , PTNT_CL_CDS&#xD;&#xA;       , ADMT_SRC_CDS&#xD;&#xA;       , ADMT_TYPE_CDS&#xD;&#xA;       , DSCRG_DSPSTN_CDS&#xD;&#xA;       , DSCRG_DSTN_CDS&#xD;&#xA;       , I.AGE_YRS_AT_CLNC_INPTNT_ADMT&#xD;&#xA;       , I.AGE_MNTHS_AT_CLNC_INPTNT_ADMT&#xD;&#xA;       , I.AGE_DYS_AT_CLNC_INPTNT_ADMT&#xD;&#xA;       , I.LOS_DYS_CLNC_INPTNT&#xD;&#xA;       , I.LOS_HRS_CLNC_INPTNT&#xD;&#xA;       , I.AGE_YRS_AT_CLNC_ADMT&#xD;&#xA;       , I.AGE_MNTHS_AT_CLNC_ADMT&#xD;&#xA;       , I.AGE_DYS_AT_CLNC_ADMT&#xD;&#xA;       , I.LOS_DYS_CLNC&#xD;&#xA;       , I.LOS_HRS_CLNC&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_1 = -1 THEN 'Non-eligible' WHEN AMI_1 = 0 THEN 'Eligible' WHEN AMI_1 = 1 THEN 'Positive' END As AMI_1&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_2 = -1 THEN 'Non-eligible' WHEN AMI_2 = 0 THEN 'Eligible' WHEN AMI_2 = 1 THEN 'Positive' END As AMI_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_3 = -1 THEN 'Non-eligible' WHEN AMI_3 = 0 THEN 'Eligible' WHEN AMI_3 = 1 THEN 'Positive' END As AMI_3&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_5 = -1 THEN 'Non-eligible' WHEN AMI_5 = 0 THEN 'Eligible' WHEN AMI_5 = 1 THEN 'Positive' END As AMI_5&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_7 = -1 THEN 'Non-eligible' WHEN AMI_7 = 0 THEN 'Eligible' WHEN AMI_7 = 1 THEN 'Positive' END As AMI_7&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_7A = -1 THEN 'Non-eligible' WHEN AMI_7A = 0 THEN 'Eligible' WHEN AMI_7A = 1 THEN 'Positive' END As AMI_7A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_8 = -1 THEN 'Non-eligible' WHEN AMI_8 = 0 THEN 'Eligible' WHEN AMI_8 = 1 THEN 'Positive' END As AMI_8&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_8A = -1 THEN 'Non-eligible' WHEN AMI_8A = 0 THEN 'Eligible' WHEN AMI_8A = 1 THEN 'Positive' END As AMI_8A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AMI_10 = -1 THEN 'Non-eligible' WHEN AMI_10 = 0 THEN 'Eligible' WHEN AMI_10 = 1 THEN 'Positive' END As AMI_10&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ED_1A = -1 THEN 'Non-eligible' WHEN ED_1A = 0 THEN 'Eligible' WHEN ED_1A = 1 THEN 'Positive' END As ED_1A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ED_1B = -1 THEN 'Non-eligible' WHEN ED_1B = 0 THEN 'Eligible' WHEN ED_1B = 1 THEN 'Positive' END As ED_1B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ED_1C = -1 THEN 'Non-eligible' WHEN ED_1C = 0 THEN 'Eligible' WHEN ED_1C = 1 THEN 'Positive' END As ED_1C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ED_2A = -1 THEN 'Non-eligible' WHEN ED_2A = 0 THEN 'Eligible' WHEN ED_2A = 1 THEN 'Positive' END As ED_2A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ED_2B = -1 THEN 'Non-eligible' WHEN ED_2B = 0 THEN 'Eligible' WHEN ED_2B = 1 THEN 'Positive' END As ED_2B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ED_2C = -1 THEN 'Non-eligible' WHEN ED_2C = 0 THEN 'Eligible' WHEN ED_2C = 1 THEN 'Positive' END As ED_2C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN HF_1 = -1 THEN 'Non-eligible' WHEN HF_1 = 0 THEN 'Eligible' WHEN HF_1 = 1 THEN 'Positive' END As HF_1&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN HF_2 = -1 THEN 'Non-eligible' WHEN HF_2 = 0 THEN 'Eligible' WHEN HF_2 = 1 THEN 'Positive' END As HF_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN HF_3 = -1 THEN 'Non-eligible' WHEN HF_3 = 0 THEN 'Eligible' WHEN HF_3 = 1 THEN 'Positive' END As HF_3&#xD;&#xA;        , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IMM_1A = -1 THEN 'Non-eligible' WHEN   IMM_1A = 0 THEN 'Eligible' WHEN  IMM_1A  = 1 THEN 'Positive' END As  IMM_1A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IMM_1B = -1 THEN 'Non-eligible' WHEN    IMM_1B = 0 THEN 'Eligible' WHEN  IMM_1B  = 1 THEN 'Positive' END As  IMM_1B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IMM_1C = -1 THEN 'Non-eligible' WHEN   IMM_1C = 0 THEN 'Eligible' WHEN  IMM_1C  = 1 THEN 'Positive' END As  IMM_1C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IMM_2 = -1 THEN 'Non-eligible' WHEN   IMM_2 = 0 THEN 'Eligible' WHEN  IMM_2  = 1 THEN 'Positive' END As  IMM_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  PN_3A = -1 THEN 'Non-eligible' WHEN   PN_3A = 0 THEN 'Eligible' WHEN  PN_3A  = 1 THEN 'Positive' END As  PN_3A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  PN_3B = -1 THEN 'Non-eligible' WHEN   PN_3B = 0 THEN 'Eligible' WHEN  PN_3B  = 1 THEN 'Positive' END As  PN_3B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  PN_6 = -1 THEN 'Non-eligible' WHEN   PN_6 = 0 THEN 'Eligible' WHEN  PN_6  = 1 THEN 'Positive' END As  PN_6&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  PN_6A = -1 THEN 'Non-eligible' WHEN   PN_6A = 0 THEN 'Eligible' WHEN  PN_6A  = 1 THEN 'Positive' END As  PN_6A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  PN_6B = -1 THEN 'Non-eligible' WHEN   PN_6B = 0 THEN 'Eligible' WHEN  PN_6B  = 1 THEN 'Positive' END As  PN_6B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_CARD_2 = -1 THEN 'Non-eligible' WHEN   SCIP_CARD_2 = 0 THEN 'Eligible' WHEN  SCIP_CARD_2  = 1 THEN 'Positive' END As  SCIP_CARD_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1A = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1A = 0 THEN 'Eligible' WHEN  SCIP_INF_1A  = 1 THEN 'Positive' END As  SCIP_INF_1A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1B = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1B = 0 THEN 'Eligible' WHEN  SCIP_INF_1B  = 1 THEN 'Positive' END As  SCIP_INF_1B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1C = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1C = 0 THEN 'Eligible' WHEN  SCIP_INF_1C  = 1 THEN 'Positive' END As  SCIP_INF_1C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1D = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1D = 0 THEN 'Eligible' WHEN  SCIP_INF_1D  = 1 THEN 'Positive' END As  SCIP_INF_1D&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1E = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1E = 0 THEN 'Eligible' WHEN  SCIP_INF_1E  = 1 THEN 'Positive' END As  SCIP_INF_1E&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1F = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1F = 0 THEN 'Eligible' WHEN  SCIP_INF_1F  = 1 THEN 'Positive' END As  SCIP_INF_1F&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1G = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1G = 0 THEN 'Eligible' WHEN  SCIP_INF_1G  = 1 THEN 'Positive' END As  SCIP_INF_1G&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_1H = -1 THEN 'Non-eligible' WHEN   SCIP_INF_1H = 0 THEN 'Eligible' WHEN  SCIP_INF_1H  = 1 THEN 'Positive' END As  SCIP_INF_1H&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2A = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2A = 0 THEN 'Eligible' WHEN  SCIP_INF_2A  = 1 THEN 'Positive' END As  SCIP_INF_2A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2B = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2B = 0 THEN 'Eligible' WHEN  SCIP_INF_2B  = 1 THEN 'Positive' END As  SCIP_INF_2B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2C = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2C = 0 THEN 'Eligible' WHEN  SCIP_INF_2C  = 1 THEN 'Positive' END As  SCIP_INF_2C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2D = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2D = 0 THEN 'Eligible' WHEN  SCIP_INF_2D  = 1 THEN 'Positive' END As  SCIP_INF_2D&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2E = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2E = 0 THEN 'Eligible' WHEN  SCIP_INF_2E  = 1 THEN 'Positive' END As  SCIP_INF_2E&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2F = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2F = 0 THEN 'Eligible' WHEN  SCIP_INF_2F  = 1 THEN 'Positive' END As  SCIP_INF_2F&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2G = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2G = 0 THEN 'Eligible' WHEN  SCIP_INF_2G  = 1 THEN 'Positive' END As  SCIP_INF_2G&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_2H = -1 THEN 'Non-eligible' WHEN   SCIP_INF_2H = 0 THEN 'Eligible' WHEN  SCIP_INF_2H  = 1 THEN 'Positive' END As  SCIP_INF_2H&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3A = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3A = 0 THEN 'Eligible' WHEN  SCIP_INF_3A  = 1 THEN 'Positive' END As  SCIP_INF_3A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3B = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3B = 0 THEN 'Eligible' WHEN  SCIP_INF_3B  = 1 THEN 'Positive' END As  SCIP_INF_3B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3C = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3C = 0 THEN 'Eligible' WHEN  SCIP_INF_3C  = 1 THEN 'Positive' END As  SCIP_INF_3C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3D = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3D = 0 THEN 'Eligible' WHEN  SCIP_INF_3D  = 1 THEN 'Positive' END As  SCIP_INF_3D&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3E = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3E = 0 THEN 'Eligible' WHEN  SCIP_INF_3E  = 1 THEN 'Positive' END As  SCIP_INF_3E&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3F = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3F = 0 THEN 'Eligible' WHEN  SCIP_INF_3F  = 1 THEN 'Positive' END As  SCIP_INF_3F&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3G = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3G = 0 THEN 'Eligible' WHEN  SCIP_INF_3G  = 1 THEN 'Positive' END As  SCIP_INF_3G&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_3H = -1 THEN 'Non-eligible' WHEN   SCIP_INF_3H = 0 THEN 'Eligible' WHEN  SCIP_INF_3H  = 1 THEN 'Positive' END As  SCIP_INF_3H&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_4 = -1 THEN 'Non-eligible' WHEN   SCIP_INF_4 = 0 THEN 'Eligible' WHEN  SCIP_INF_4  = 1 THEN 'Positive' END As  SCIP_INF_4&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_6 = -1 THEN 'Non-eligible' WHEN   SCIP_INF_6 = 0 THEN 'Eligible' WHEN  SCIP_INF_6  = 1 THEN 'Positive' END As  SCIP_INF_6&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_9 = -1 THEN 'Non-eligible' WHEN   SCIP_INF_9 = 0 THEN 'Eligible' WHEN  SCIP_INF_9  = 1 THEN 'Positive' END As  SCIP_INF_9&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_INF_10 = -1 THEN 'Non-eligible' WHEN   SCIP_INF_10 = 0 THEN 'Eligible' WHEN  SCIP_INF_10  = 1 THEN 'Positive' END As  SCIP_INF_10&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SCIP_VTE_2 = -1 THEN 'Non-eligible' WHEN   SCIP_VTE_2 = 0 THEN 'Eligible' WHEN  SCIP_VTE_2  = 1 THEN 'Positive' END As  SCIP_VTE_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_1 = -1 THEN 'Non-eligible' WHEN   STK_1 = 0 THEN 'Eligible' WHEN  STK_1  = 1 THEN 'Positive' END As  STK_1&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_2 = -1 THEN 'Non-eligible' WHEN   STK_2 = 0 THEN 'Eligible' WHEN  STK_2  = 1 THEN 'Positive' END As  STK_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_3 = -1 THEN 'Non-eligible' WHEN   STK_3 = 0 THEN 'Eligible' WHEN  STK_3  = 1 THEN 'Positive' END As  STK_3&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_4 = -1 THEN 'Non-eligible' WHEN   STK_4 = 0 THEN 'Eligible' WHEN  STK_4  = 1 THEN 'Positive' END As  STK_4&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_5 = -1 THEN 'Non-eligible' WHEN   STK_5 = 0 THEN 'Eligible' WHEN  STK_5  = 1 THEN 'Positive' END As  STK_5&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_6 = -1 THEN 'Non-eligible' WHEN   STK_6 = 0 THEN 'Eligible' WHEN  STK_6  = 1 THEN 'Positive' END As  STK_6&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_8 = -1 THEN 'Non-eligible' WHEN   STK_8 = 0 THEN 'Eligible' WHEN  STK_8  = 1 THEN 'Positive' END As  STK_8&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  STK_10 = -1 THEN 'Non-eligible' WHEN   STK_10 = 0 THEN 'Eligible' WHEN  STK_10  = 1 THEN 'Positive' END As  STK_10&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  VTE_1 = -1 THEN 'Non-eligible' WHEN   VTE_1 = 0 THEN 'Eligible' WHEN  VTE_1  = 1 THEN 'Positive' END As  VTE_1&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  VTE_2 = -1 THEN 'Non-eligible' WHEN   VTE_2 = 0 THEN 'Eligible' WHEN  VTE_2  = 1 THEN 'Positive' END As  VTE_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  VTE_3 = -1 THEN 'Non-eligible' WHEN   VTE_3 = 0 THEN 'Eligible' WHEN  VTE_3  = 1 THEN 'Positive' END As  VTE_3&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  VTE_4 = -1 THEN 'Non-eligible' WHEN   VTE_4 = 0 THEN 'Eligible' WHEN  VTE_4  = 1 THEN 'Positive' END As  VTE_4&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  VTE_5 = -1 THEN 'Non-eligible' WHEN   VTE_5 = 0 THEN 'Eligible' WHEN  VTE_5  = 1 THEN 'Positive' END As  VTE_5&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  VTE_6 = -1 THEN 'Non-eligible' WHEN   VTE_6 = 0 THEN 'Eligible' WHEN  VTE_6  = 1 THEN 'Positive' END As  VTE_6&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_1 = -1 THEN 'Non-eligible' WHEN CMS_1 = 0 THEN 'Eligible' WHEN CMS_1 = 1 THEN 'Positive' END As CMS_1&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_2 = -1 THEN 'Non-eligible' WHEN CMS_2 = 0 THEN 'Eligible' WHEN CMS_2 = 1 THEN 'Positive' END As CMS_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_3 = -1 THEN 'Non-eligible' WHEN CMS_3 = 0 THEN 'Eligible' WHEN CMS_3 = 1 THEN 'Positive' END As CMS_3&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_4 = -1 THEN 'Non-eligible' WHEN CMS_4 = 0 THEN 'Eligible' WHEN CMS_4 = 1 THEN 'Positive' END As CMS_4&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_5 = -1 THEN 'Non-eligible' WHEN CMS_5 = 0 THEN 'Eligible' WHEN CMS_5 = 1 THEN 'Positive' END As CMS_5&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_6 = -1 THEN 'Non-eligible' WHEN CMS_6 = 0 THEN 'Eligible' WHEN CMS_6 = 1 THEN 'Positive' END As CMS_6&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_7 = -1 THEN 'Non-eligible' WHEN CMS_7 = 0 THEN 'Eligible' WHEN CMS_7 = 1 THEN 'Positive' END As CMS_7&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_8 = -1 THEN 'Non-eligible' WHEN CMS_8 = 0 THEN 'Eligible' WHEN CMS_8 = 1 THEN 'Positive' END As CMS_8&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_9 = -1 THEN 'Non-eligible' WHEN CMS_9 = 0 THEN 'Eligible' WHEN CMS_9 = 1 THEN 'Positive' END As CMS_9&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_10 = -1 THEN 'Non-eligible' WHEN CMS_10 = 0 THEN 'Eligible' WHEN CMS_10 = 1 THEN 'Positive' END As CMS_10&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_11 = -1 THEN 'Non-eligible' WHEN CMS_11 = 0 THEN 'Eligible' WHEN CMS_11 = 1 THEN 'Positive' END As CMS_11&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_12 = -1 THEN 'Non-eligible' WHEN CMS_12 = 0 THEN 'Eligible' WHEN CMS_12 = 1 THEN 'Positive' END As CMS_12&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_13 = -1 THEN 'Non-eligible' WHEN CMS_13 = 0 THEN 'Eligible' WHEN CMS_13 = 1 THEN 'Positive' END As CMS_13&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_14 = -1 THEN 'Non-eligible' WHEN CMS_14 = 0 THEN 'Eligible' WHEN CMS_14 = 1 THEN 'Positive' END As CMS_14&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_15 = -1 THEN 'Non-eligible' WHEN CMS_15 = 0 THEN 'Eligible' WHEN CMS_15 = 1 THEN 'Positive' END As CMS_15&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_16 = -1 THEN 'Non-eligible' WHEN CMS_16 = 0 THEN 'Eligible' WHEN CMS_16 = 1 THEN 'Positive' END As CMS_16&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_17 = -1 THEN 'Non-eligible' WHEN CMS_17 = 0 THEN 'Eligible' WHEN CMS_17 = 1 THEN 'Positive' END As CMS_17&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_18 = -1 THEN 'Non-eligible' WHEN CMS_18 = 0 THEN 'Eligible' WHEN CMS_18 = 1 THEN 'Positive' END As CMS_18&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CMS_159 = -1 THEN 'Non-eligible' WHEN CMS_159 = 0 THEN 'Eligible' WHEN CMS_159 = 1 THEN 'Positive' END As CMS_159&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_1 = -1 THEN 'Non-eligible' WHEN PREMIER_1 = 0 THEN 'Eligible' WHEN PREMIER_1 = 1 THEN 'Positive' END As PREMIER_1&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_2 = -1 THEN 'Non-eligible' WHEN PREMIER_2 = 0 THEN 'Eligible' WHEN PREMIER_2 = 1 THEN 'Positive' END As PREMIER_2&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_3 = -1 THEN 'Non-eligible' WHEN PREMIER_3 = 0 THEN 'Eligible' WHEN PREMIER_3 = 1 THEN 'Positive' END As PREMIER_3&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_4 = -1 THEN 'Non-eligible' WHEN PREMIER_4 = 0 THEN 'Eligible' WHEN PREMIER_4 = 1 THEN 'Positive' END As PREMIER_4&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_5 = -1 THEN 'Non-eligible' WHEN PREMIER_5 = 0 THEN 'Eligible' WHEN PREMIER_5 = 1 THEN 'Positive' END As PREMIER_5&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_7 = -1 THEN 'Non-eligible' WHEN PREMIER_7 = 0 THEN 'Eligible' WHEN PREMIER_7 = 1 THEN 'Positive' END As PREMIER_7&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_8 = -1 THEN 'Non-eligible' WHEN PREMIER_8 = 0 THEN 'Eligible' WHEN PREMIER_8 = 1 THEN 'Positive' END As PREMIER_8&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_10 = -1 THEN 'Non-eligible' WHEN PREMIER_10 = 0 THEN 'Eligible' WHEN PREMIER_10 = 1 THEN 'Positive' END As PREMIER_10&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_11 = -1 THEN 'Non-eligible' WHEN PREMIER_11 = 0 THEN 'Eligible' WHEN PREMIER_11 = 1 THEN 'Positive' END As PREMIER_11&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_12 = -1 THEN 'Non-eligible' WHEN PREMIER_12 = 0 THEN 'Eligible' WHEN PREMIER_12 = 1 THEN 'Positive' END As PREMIER_12&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_13 = -1 THEN 'Non-eligible' WHEN PREMIER_13 = 0 THEN 'Eligible' WHEN PREMIER_13 = 1 THEN 'Positive' END As PREMIER_13&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_14 = -1 THEN 'Non-eligible' WHEN PREMIER_14 = 0 THEN 'Eligible' WHEN PREMIER_14 = 1 THEN 'Positive' END As PREMIER_14&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_15 = -1 THEN 'Non-eligible' WHEN PREMIER_15 = 0 THEN 'Eligible' WHEN PREMIER_15 = 1 THEN 'Positive' END As PREMIER_15&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_16 = -1 THEN 'Non-eligible' WHEN PREMIER_16 = 0 THEN 'Eligible' WHEN PREMIER_16 = 1 THEN 'Positive' END As PREMIER_16&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_17 = -1 THEN 'Non-eligible' WHEN PREMIER_17 = 0 THEN 'Eligible' WHEN PREMIER_17 = 1 THEN 'Positive' END As PREMIER_17&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_18 = -1 THEN 'Non-eligible' WHEN PREMIER_18 = 0 THEN 'Eligible' WHEN PREMIER_18 = 1 THEN 'Positive' END As PREMIER_18&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_19 = -1 THEN 'Non-eligible' WHEN PREMIER_19 = 0 THEN 'Eligible' WHEN PREMIER_19 = 1 THEN 'Positive' END As PREMIER_19&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_20 = -1 THEN 'Non-eligible' WHEN PREMIER_20 = 0 THEN 'Eligible' WHEN PREMIER_20 = 1 THEN 'Positive' END As PREMIER_20&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_22 = -1 THEN 'Non-eligible' WHEN PREMIER_22 = 0 THEN 'Eligible' WHEN PREMIER_22 = 1 THEN 'Positive' END As PREMIER_22&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_23 = -1 THEN 'Non-eligible' WHEN PREMIER_23 = 0 THEN 'Eligible' WHEN PREMIER_23 = 1 THEN 'Positive' END As PREMIER_23&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_24 = -1 THEN 'Non-eligible' WHEN PREMIER_24 = 0 THEN 'Eligible' WHEN PREMIER_24 = 1 THEN 'Positive' END As PREMIER_24&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_25 = -1 THEN 'Non-eligible' WHEN PREMIER_25 = 0 THEN 'Eligible' WHEN PREMIER_25 = 1 THEN 'Positive' END As PREMIER_25&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_26 = -1 THEN 'Non-eligible' WHEN PREMIER_26 = 0 THEN 'Eligible' WHEN PREMIER_26 = 1 THEN 'Positive' END As PREMIER_26&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_27 = -1 THEN 'Non-eligible' WHEN PREMIER_27 = 0 THEN 'Eligible' WHEN PREMIER_27 = 1 THEN 'Positive' END As PREMIER_27&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_29 = -1 THEN 'Non-eligible' WHEN PREMIER_29 = 0 THEN 'Eligible' WHEN PREMIER_29 = 1 THEN 'Positive' END As PREMIER_29&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_30 = -1 THEN 'Non-eligible' WHEN PREMIER_30 = 0 THEN 'Eligible' WHEN PREMIER_30 = 1 THEN 'Positive' END As PREMIER_30&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_32 = -1 THEN 'Non-eligible' WHEN PREMIER_32 = 0 THEN 'Eligible' WHEN PREMIER_32 = 1 THEN 'Positive' END As PREMIER_32&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_35 = -1 THEN 'Non-eligible' WHEN PREMIER_35 = 0 THEN 'Eligible' WHEN PREMIER_35 = 1 THEN 'Positive' END As PREMIER_35&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_36 = -1 THEN 'Non-eligible' WHEN PREMIER_36 = 0 THEN 'Eligible' WHEN PREMIER_36 = 1 THEN 'Positive' END As PREMIER_36&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_37 = -1 THEN 'Non-eligible' WHEN PREMIER_37 = 0 THEN 'Eligible' WHEN PREMIER_37 = 1 THEN 'Positive' END As PREMIER_37&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_38 = -1 THEN 'Non-eligible' WHEN PREMIER_38 = 0 THEN 'Eligible' WHEN PREMIER_38 = 1 THEN 'Positive' END As PREMIER_38&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_40 = -1 THEN 'Non-eligible' WHEN PREMIER_40 = 0 THEN 'Eligible' WHEN PREMIER_40 = 1 THEN 'Positive' END As PREMIER_40&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_45 = -1 THEN 'Non-eligible' WHEN PREMIER_45 = 0 THEN 'Eligible' WHEN PREMIER_45 = 1 THEN 'Positive' END As PREMIER_45&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_46 = -1 THEN 'Non-eligible' WHEN PREMIER_46 = 0 THEN 'Eligible' WHEN PREMIER_46 = 1 THEN 'Positive' END As PREMIER_46&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_51 = -1 THEN 'Non-eligible' WHEN PREMIER_51 = 0 THEN 'Eligible' WHEN PREMIER_51 = 1 THEN 'Positive' END As PREMIER_51&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_52 = -1 THEN 'Non-eligible' WHEN PREMIER_52 = 0 THEN 'Eligible' WHEN PREMIER_52 = 1 THEN 'Positive' END As PREMIER_52&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_54 = -1 THEN 'Non-eligible' WHEN PREMIER_54 = 0 THEN 'Eligible' WHEN PREMIER_54 = 1 THEN 'Positive' END As PREMIER_54&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_55 = -1 THEN 'Non-eligible' WHEN PREMIER_55 = 0 THEN 'Eligible' WHEN PREMIER_55 = 1 THEN 'Positive' END As PREMIER_55&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_57 = -1 THEN 'Non-eligible' WHEN PREMIER_57 = 0 THEN 'Eligible' WHEN PREMIER_57 = 1 THEN 'Positive' END As PREMIER_57&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_58 = -1 THEN 'Non-eligible' WHEN PREMIER_58 = 0 THEN 'Eligible' WHEN PREMIER_58 = 1 THEN 'Positive' END As PREMIER_58&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_60 = -1 THEN 'Non-eligible' WHEN PREMIER_60 = 0 THEN 'Eligible' WHEN PREMIER_60 = 1 THEN 'Positive' END As PREMIER_60&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_61 = -1 THEN 'Non-eligible' WHEN PREMIER_61 = 0 THEN 'Eligible' WHEN PREMIER_61 = 1 THEN 'Positive' END As PREMIER_61&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_62 = -1 THEN 'Non-eligible' WHEN PREMIER_62 = 0 THEN 'Eligible' WHEN PREMIER_62 = 1 THEN 'Positive' END As PREMIER_62&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_65 = -1 THEN 'Non-eligible' WHEN PREMIER_65 = 0 THEN 'Eligible' WHEN PREMIER_65 = 1 THEN 'Positive' END As PREMIER_65&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_71 = -1 THEN 'Non-eligible' WHEN PREMIER_71 = 0 THEN 'Eligible' WHEN PREMIER_71 = 1 THEN 'Positive' END As PREMIER_71&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_73 = -1 THEN 'Non-eligible' WHEN PREMIER_73 = 0 THEN 'Eligible' WHEN PREMIER_73 = 1 THEN 'Positive' END As PREMIER_73&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_75 = -1 THEN 'Non-eligible' WHEN PREMIER_75 = 0 THEN 'Eligible' WHEN PREMIER_75 = 1 THEN 'Positive' END As PREMIER_75&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_76 = -1 THEN 'Non-eligible' WHEN PREMIER_76 = 0 THEN 'Eligible' WHEN PREMIER_76 = 1 THEN 'Positive' END As PREMIER_76&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_77 = -1 THEN 'Non-eligible' WHEN PREMIER_77 = 0 THEN 'Eligible' WHEN PREMIER_77 = 1 THEN 'Positive' END As PREMIER_77&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_78 = -1 THEN 'Non-eligible' WHEN PREMIER_78 = 0 THEN 'Eligible' WHEN PREMIER_78 = 1 THEN 'Positive' END As PREMIER_78&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_79 = -1 THEN 'Non-eligible' WHEN PREMIER_79 = 0 THEN 'Eligible' WHEN PREMIER_79 = 1 THEN 'Positive' END As PREMIER_79&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_80 = -1 THEN 'Non-eligible' WHEN PREMIER_80 = 0 THEN 'Eligible' WHEN PREMIER_80 = 1 THEN 'Positive' END As PREMIER_80&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_81 = -1 THEN 'Non-eligible' WHEN PREMIER_81 = 0 THEN 'Eligible' WHEN PREMIER_81 = 1 THEN 'Positive' END As PREMIER_81&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_82 = -1 THEN 'Non-eligible' WHEN PREMIER_82 = 0 THEN 'Eligible' WHEN PREMIER_82 = 1 THEN 'Positive' END As PREMIER_82&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_84 = -1 THEN 'Non-eligible' WHEN PREMIER_84 = 0 THEN 'Eligible' WHEN PREMIER_84 = 1 THEN 'Positive' END As PREMIER_84&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_86 = -1 THEN 'Non-eligible' WHEN PREMIER_86 = 0 THEN 'Eligible' WHEN PREMIER_86 = 1 THEN 'Positive' END As PREMIER_86&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_88 = -1 THEN 'Non-eligible' WHEN PREMIER_88 = 0 THEN 'Eligible' WHEN PREMIER_88 = 1 THEN 'Positive' END As PREMIER_88&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_92 = -1 THEN 'Non-eligible' WHEN PREMIER_92 = 0 THEN 'Eligible' WHEN PREMIER_92 = 1 THEN 'Positive' END As PREMIER_92&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_94 = -1 THEN 'Non-eligible' WHEN PREMIER_94 = 0 THEN 'Eligible' WHEN PREMIER_94 = 1 THEN 'Positive' END As PREMIER_94&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_96 = -1 THEN 'Non-eligible' WHEN PREMIER_96 = 0 THEN 'Eligible' WHEN PREMIER_96 = 1 THEN 'Positive' END As PREMIER_96&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_97 = -1 THEN 'Non-eligible' WHEN PREMIER_97 = 0 THEN 'Eligible' WHEN PREMIER_97 = 1 THEN 'Positive' END As PREMIER_97&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_98 = -1 THEN 'Non-eligible' WHEN PREMIER_98 = 0 THEN 'Eligible' WHEN PREMIER_98 = 1 THEN 'Positive' END As PREMIER_98&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_99 = -1 THEN 'Non-eligible' WHEN PREMIER_99 = 0 THEN 'Eligible' WHEN PREMIER_99 = 1 THEN 'Positive' END As PREMIER_99&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_100 = -1 THEN 'Non-eligible' WHEN PREMIER_100 = 0 THEN 'Eligible' WHEN PREMIER_100 = 1 THEN 'Positive' END As PREMIER_100&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_104 = -1 THEN 'Non-eligible' WHEN PREMIER_104 = 0 THEN 'Eligible' WHEN PREMIER_104 = 1 THEN 'Positive' END As PREMIER_104&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_107 = -1 THEN 'Non-eligible' WHEN PREMIER_107 = 0 THEN 'Eligible' WHEN PREMIER_107 = 1 THEN 'Positive' END As PREMIER_107&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_108 = -1 THEN 'Non-eligible' WHEN PREMIER_108 = 0 THEN 'Eligible' WHEN PREMIER_108 = 1 THEN 'Positive' END As PREMIER_108&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_109 = -1 THEN 'Non-eligible' WHEN PREMIER_109 = 0 THEN 'Eligible' WHEN PREMIER_109 = 1 THEN 'Positive' END As PREMIER_109&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_110 = -1 THEN 'Non-eligible' WHEN PREMIER_110 = 0 THEN 'Eligible' WHEN PREMIER_110 = 1 THEN 'Positive' END As PREMIER_110&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_111 = -1 THEN 'Non-eligible' WHEN PREMIER_111 = 0 THEN 'Eligible' WHEN PREMIER_111 = 1 THEN 'Positive' END As PREMIER_111&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_112 = -1 THEN 'Non-eligible' WHEN PREMIER_112 = 0 THEN 'Eligible' WHEN PREMIER_112 = 1 THEN 'Positive' END As PREMIER_112&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_117 = -1 THEN 'Non-eligible' WHEN PREMIER_117 = 0 THEN 'Eligible' WHEN PREMIER_117 = 1 THEN 'Positive' END As PREMIER_117&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_118 = -1 THEN 'Non-eligible' WHEN PREMIER_118 = 0 THEN 'Eligible' WHEN PREMIER_118 = 1 THEN 'Positive' END As PREMIER_118&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_120 = -1 THEN 'Non-eligible' WHEN PREMIER_120 = 0 THEN 'Eligible' WHEN PREMIER_120 = 1 THEN 'Positive' END As PREMIER_120&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_125 = -1 THEN 'Non-eligible' WHEN PREMIER_125 = 0 THEN 'Eligible' WHEN PREMIER_125 = 1 THEN 'Positive' END As PREMIER_125&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_126 = -1 THEN 'Non-eligible' WHEN PREMIER_126 = 0 THEN 'Eligible' WHEN PREMIER_126 = 1 THEN 'Positive' END As PREMIER_126&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_127 = -1 THEN 'Non-eligible' WHEN PREMIER_127 = 0 THEN 'Eligible' WHEN PREMIER_127 = 1 THEN 'Positive' END As PREMIER_127&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_128 = -1 THEN 'Non-eligible' WHEN PREMIER_128 = 0 THEN 'Eligible' WHEN PREMIER_128 = 1 THEN 'Positive' END As PREMIER_128&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_130 = -1 THEN 'Non-eligible' WHEN PREMIER_130 = 0 THEN 'Eligible' WHEN PREMIER_130 = 1 THEN 'Positive' END As PREMIER_130&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_131 = -1 THEN 'Non-eligible' WHEN PREMIER_131 = 0 THEN 'Eligible' WHEN PREMIER_131 = 1 THEN 'Positive' END As PREMIER_131&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_134 = -1 THEN 'Non-eligible' WHEN PREMIER_134 = 0 THEN 'Eligible' WHEN PREMIER_134 = 1 THEN 'Positive' END As PREMIER_134&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_136 = -1 THEN 'Non-eligible' WHEN PREMIER_136 = 0 THEN 'Eligible' WHEN PREMIER_136 = 1 THEN 'Positive' END As PREMIER_136&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_138 = -1 THEN 'Non-eligible' WHEN PREMIER_138 = 0 THEN 'Eligible' WHEN PREMIER_138 = 1 THEN 'Positive' END As PREMIER_138&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_139 = -1 THEN 'Non-eligible' WHEN PREMIER_139 = 0 THEN 'Eligible' WHEN PREMIER_139 = 1 THEN 'Positive' END As PREMIER_139&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_141 = -1 THEN 'Non-eligible' WHEN PREMIER_141 = 0 THEN 'Eligible' WHEN PREMIER_141 = 1 THEN 'Positive' END As PREMIER_141&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_142 = -1 THEN 'Non-eligible' WHEN PREMIER_142 = 0 THEN 'Eligible' WHEN PREMIER_142 = 1 THEN 'Positive' END As PREMIER_142&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_143 = -1 THEN 'Non-eligible' WHEN PREMIER_143 = 0 THEN 'Eligible' WHEN PREMIER_143 = 1 THEN 'Positive' END As PREMIER_143&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_144 = -1 THEN 'Non-eligible' WHEN PREMIER_144 = 0 THEN 'Eligible' WHEN PREMIER_144 = 1 THEN 'Positive' END As PREMIER_144&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_150 = -1 THEN 'Non-eligible' WHEN PREMIER_150 = 0 THEN 'Eligible' WHEN PREMIER_150 = 1 THEN 'Positive' END As PREMIER_150&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_153 = -1 THEN 'Non-eligible' WHEN PREMIER_153 = 0 THEN 'Eligible' WHEN PREMIER_153 = 1 THEN 'Positive' END As PREMIER_153&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_154 = -1 THEN 'Non-eligible' WHEN PREMIER_154 = 0 THEN 'Eligible' WHEN PREMIER_154 = 1 THEN 'Positive' END As PREMIER_154&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_155 = -1 THEN 'Non-eligible' WHEN PREMIER_155 = 0 THEN 'Eligible' WHEN PREMIER_155 = 1 THEN 'Positive' END As PREMIER_155&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_156 = -1 THEN 'Non-eligible' WHEN PREMIER_156 = 0 THEN 'Eligible' WHEN PREMIER_156 = 1 THEN 'Positive' END As PREMIER_156&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_157 = -1 THEN 'Non-eligible' WHEN PREMIER_157 = 0 THEN 'Eligible' WHEN PREMIER_157 = 1 THEN 'Positive' END As PREMIER_157&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_158 = -1 THEN 'Non-eligible' WHEN PREMIER_158 = 0 THEN 'Eligible' WHEN PREMIER_158 = 1 THEN 'Positive' END As PREMIER_158&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PREMIER_159 = -1 THEN 'Non-eligible' WHEN PREMIER_159 = 0 THEN 'Eligible' WHEN PREMIER_159 = 1 THEN 'Positive' END As PREMIER_159&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI1_ESOPHAGEAL_RESECTION_VOL = -1 THEN 'Non-eligible' WHEN   IQI1_ESOPHAGEAL_RESECTION_VOL = 0 THEN 'Eligible' WHEN  IQI1_ESOPHAGEAL_RESECTION_VOL  = 1 THEN 'Positive' END As  IQI1_ESOPHAGEAL_RESECTION_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI2_PANCREATIC_RESECTION_VOL = -1 THEN 'Non-eligible' WHEN   IQI2_PANCREATIC_RESECTION_VOL = 0 THEN 'Eligible' WHEN  IQI2_PANCREATIC_RESECTION_VOL  = 1 THEN 'Positive' END As  IQI2_PANCREATIC_RESECTION_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI4_AAA_REPAIR_VOL = -1 THEN 'Non-eligible' WHEN   IQI4_AAA_REPAIR_VOL = 0 THEN 'Eligible' WHEN  IQI4_AAA_REPAIR_VOL  = 1 THEN 'Positive' END As  IQI4_AAA_REPAIR_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI5_CABG_VOL = -1 THEN 'Non-eligible' WHEN   IQI5_CABG_VOL = 0 THEN 'Eligible' WHEN  IQI5_CABG_VOL  = 1 THEN 'Positive' END As  IQI5_CABG_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI6_PTCA_VOL = -1 THEN 'Non-eligible' WHEN   IQI6_PTCA_VOL = 0 THEN 'Eligible' WHEN  IQI6_PTCA_VOL  = 1 THEN 'Positive' END As  IQI6_PTCA_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI7_CAROTID_ENDARTERECTOMY_VOL = -1 THEN 'Non-eligible' WHEN   IQI7_CAROTID_ENDARTERECTOMY_VOL = 0 THEN 'Eligible' WHEN  IQI7_CAROTID_ENDARTERECTOMY_VOL  = 1 THEN 'Positive' END As  IQI7_CAROTID_ENDARTERECTOMY_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI2A_PANCREATIC_RESECTION_VOL = -1 THEN 'Non-eligible' WHEN   IQI2A_PANCREATIC_RESECTION_VOL = 0 THEN 'Eligible' WHEN  IQI2A_PANCREATIC_RESECTION_VOL  = 1 THEN 'Positive' END As  IQI2A_PANCREATIC_RESECTION_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI2B_PANCREATIC_RESECTION_VOL = -1 THEN 'Non-eligible' WHEN   IQI2B_PANCREATIC_RESECTION_VOL = 0 THEN 'Eligible' WHEN  IQI2B_PANCREATIC_RESECTION_VOL  = 1 THEN 'Positive' END As  IQI2B_PANCREATIC_RESECTION_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI4A_AAA_REPAIR_VOL = -1 THEN 'Non-eligible' WHEN   IQI4A_AAA_REPAIR_VOL = 0 THEN 'Eligible' WHEN  IQI4A_AAA_REPAIR_VOL  = 1 THEN 'Positive' END As  IQI4A_AAA_REPAIR_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI4B_AAA_REPAIR_VOL = -1 THEN 'Non-eligible' WHEN   IQI4B_AAA_REPAIR_VOL = 0 THEN 'Eligible' WHEN  IQI4B_AAA_REPAIR_VOL  = 1 THEN 'Positive' END As  IQI4B_AAA_REPAIR_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI4C_AAA_REPAIR_VOL = -1 THEN 'Non-eligible' WHEN   IQI4C_AAA_REPAIR_VOL = 0 THEN 'Eligible' WHEN  IQI4C_AAA_REPAIR_VOL  = 1 THEN 'Positive' END As  IQI4C_AAA_REPAIR_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI4D_AAA_REPAIR_VOL = -1 THEN 'Non-eligible' WHEN   IQI4D_AAA_REPAIR_VOL = 0 THEN 'Eligible' WHEN  IQI4D_AAA_REPAIR_VOL  = 1 THEN 'Positive' END As  IQI4D_AAA_REPAIR_VOL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI8_ESOPHAGEAL_RESECTION_MORT = -1 THEN 'Non-eligible' WHEN   IQI8_ESOPHAGEAL_RESECTION_MORT = 0 THEN 'Eligible' WHEN  IQI8_ESOPHAGEAL_RESECTION_MORT  = 1 THEN 'Positive' END As  IQI8_ESOPHAGEAL_RESECTION_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI9_PANCREATIC_RESECTION_MORT = -1 THEN 'Non-eligible' WHEN   IQI9_PANCREATIC_RESECTION_MORT = 0 THEN 'Eligible' WHEN  IQI9_PANCREATIC_RESECTION_MORT  = 1 THEN 'Positive' END As  IQI9_PANCREATIC_RESECTION_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI11_AAA_REPAIR_MORT = -1 THEN 'Non-eligible' WHEN   IQI11_AAA_REPAIR_MORT = 0 THEN 'Eligible' WHEN  IQI11_AAA_REPAIR_MORT  = 1 THEN 'Positive' END As  IQI11_AAA_REPAIR_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI12_CABG_MORT = -1 THEN 'Non-eligible' WHEN   IQI12_CABG_MORT = 0 THEN 'Eligible' WHEN  IQI12_CABG_MORT  = 1 THEN 'Positive' END As  IQI12_CABG_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI13_CRANIOTOMY_MORT = -1 THEN 'Non-eligible' WHEN   IQI13_CRANIOTOMY_MORT = 0 THEN 'Eligible' WHEN  IQI13_CRANIOTOMY_MORT  = 1 THEN 'Positive' END As  IQI13_CRANIOTOMY_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI14_HIP_REPLACEMENT_MORT = -1 THEN 'Non-eligible' WHEN   IQI14_HIP_REPLACEMENT_MORT = 0 THEN 'Eligible' WHEN  IQI14_HIP_REPLACEMENT_MORT  = 1 THEN 'Positive' END As  IQI14_HIP_REPLACEMENT_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI15_AMI_MORT = -1 THEN 'Non-eligible' WHEN   IQI15_AMI_MORT = 0 THEN 'Eligible' WHEN  IQI15_AMI_MORT  = 1 THEN 'Positive' END As  IQI15_AMI_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI16_CHF_MORT = -1 THEN 'Non-eligible' WHEN   IQI16_CHF_MORT = 0 THEN 'Eligible' WHEN  IQI16_CHF_MORT  = 1 THEN 'Positive' END As  IQI16_CHF_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI17_ACUTE_STROKE_MORT = -1 THEN 'Non-eligible' WHEN   IQI17_ACUTE_STROKE_MORT = 0 THEN 'Eligible' WHEN  IQI17_ACUTE_STROKE_MORT  = 1 THEN 'Positive' END As  IQI17_ACUTE_STROKE_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI18_GASTROINTESTINAL_HEM_MORT = -1 THEN 'Non-eligible' WHEN   IQI18_GASTROINTESTINAL_HEM_MORT = 0 THEN 'Eligible' WHEN  IQI18_GASTROINTESTINAL_HEM_MORT  = 1 THEN 'Positive' END As  IQI18_GASTROINTESTINAL_HEM_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI19_HIP_FRACTURE_MORT = -1 THEN 'Non-eligible' WHEN   IQI19_HIP_FRACTURE_MORT = 0 THEN 'Eligible' WHEN  IQI19_HIP_FRACTURE_MORT  = 1 THEN 'Positive' END As  IQI19_HIP_FRACTURE_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI20_PNEUMONIA_MORT = -1 THEN 'Non-eligible' WHEN   IQI20_PNEUMONIA_MORT = 0 THEN 'Eligible' WHEN  IQI20_PNEUMONIA_MORT  = 1 THEN 'Positive' END As  IQI20_PNEUMONIA_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI21_CESAREAN_DELIVERY = -1 THEN 'Non-eligible' WHEN   IQI21_CESAREAN_DELIVERY = 0 THEN 'Eligible' WHEN  IQI21_CESAREAN_DELIVERY  = 1 THEN 'Positive' END As  IQI21_CESAREAN_DELIVERY&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI22_VBAC_UNCOMP = -1 THEN 'Non-eligible' WHEN   IQI22_VBAC_UNCOMP = 0 THEN 'Eligible' WHEN  IQI22_VBAC_UNCOMP  = 1 THEN 'Positive' END As  IQI22_VBAC_UNCOMP&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI23_LAPAROSCOPIC_CHOLECYSTECTOMY = -1 THEN 'Non-eligible' WHEN   IQI23_LAPAROSCOPIC_CHOLECYSTECTOMY = 0 THEN 'Eligible' WHEN  IQI23_LAPAROSCOPIC_CHOLECYSTECTOMY  = 1 THEN 'Positive' END As  IQI23_LAPAROSCOPIC_CHOLECYSTECTOMY&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI24_INCIDENTAL_APPENDECTOMY_ELDERLY = -1 THEN 'Non-eligible' WHEN   IQI24_INCIDENTAL_APPENDECTOMY_ELDERLY = 0 THEN 'Eligible' WHEN  IQI24_INCIDENTAL_APPENDECTOMY_ELDERLY  = 1 THEN 'Positive' END As  IQI24_INCIDENTAL_APPENDECTOMY_ELDERLY&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI25_BILATERAL_CARDIAC_CATH = -1 THEN 'Non-eligible' WHEN   IQI25_BILATERAL_CARDIAC_CATH = 0 THEN 'Eligible' WHEN  IQI25_BILATERAL_CARDIAC_CATH  = 1 THEN 'Positive' END As  IQI25_BILATERAL_CARDIAC_CATH&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI30_PTCA_MORT = -1 THEN 'Non-eligible' WHEN   IQI30_PTCA_MORT = 0 THEN 'Eligible' WHEN  IQI30_PTCA_MORT  = 1 THEN 'Positive' END As  IQI30_PTCA_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI31_CAROTID_ENDARTERECTOMY_MORT = -1 THEN 'Non-eligible' WHEN   IQI31_CAROTID_ENDARTERECTOMY_MORT = 0 THEN 'Eligible' WHEN  IQI31_CAROTID_ENDARTERECTOMY_MORT  = 1 THEN 'Positive' END As  IQI31_CAROTID_ENDARTERECTOMY_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI32_AMI_MORT_RATE_WO_TRANSFER = -1 THEN 'Non-eligible' WHEN   IQI32_AMI_MORT_RATE_WO_TRANSFER = 0 THEN 'Eligible' WHEN  IQI32_AMI_MORT_RATE_WO_TRANSFER  = 1 THEN 'Positive' END As  IQI32_AMI_MORT_RATE_WO_TRANSFER&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI33_PRI_CESAREAN_DELIVERY = -1 THEN 'Non-eligible' WHEN   IQI33_PRI_CESAREAN_DELIVERY = 0 THEN 'Eligible' WHEN  IQI33_PRI_CESAREAN_DELIVERY  = 1 THEN 'Positive' END As  IQI33_PRI_CESAREAN_DELIVERY&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI34_VBAC_ALL = -1 THEN 'Non-eligible' WHEN   IQI34_VBAC_ALL = 0 THEN 'Eligible' WHEN  IQI34_VBAC_ALL  = 1 THEN 'Positive' END As  IQI34_VBAC_ALL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI9A_PANCREATIC_RESECTION_MORT = -1 THEN 'Non-eligible' WHEN   IQI9A_PANCREATIC_RESECTION_MORT = 0 THEN 'Eligible' WHEN  IQI9A_PANCREATIC_RESECTION_MORT  = 1 THEN 'Positive' END As  IQI9A_PANCREATIC_RESECTION_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI9B_PANCREATIC_RESECTION_MORT = -1 THEN 'Non-eligible' WHEN   IQI9B_PANCREATIC_RESECTION_MORT = 0 THEN 'Eligible' WHEN  IQI9B_PANCREATIC_RESECTION_MORT  = 1 THEN 'Positive' END As  IQI9B_PANCREATIC_RESECTION_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN IQI11A_AAA_REPAIR_MORT = -1 THEN 'Non-eligible' WHEN   IQI11A_AAA_REPAIR_MORT = 0 THEN 'Eligible' WHEN IQI11A_AAA_REPAIR_MORT  = 1 THEN 'Positive' END As IQI11A_AAA_REPAIR_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI11B_AAA_REPAIR_MORT = -1 THEN 'Non-eligible' WHEN   IQI11B_AAA_REPAIR_MORT = 0 THEN 'Eligible' WHEN  IQI11B_AAA_REPAIR_MORT  = 1 THEN 'Positive' END As  IQI11B_AAA_REPAIR_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI11C_AAA_REPAIR_MORT = -1 THEN 'Non-eligible' WHEN   IQI11C_AAA_REPAIR_MORT = 0 THEN 'Eligible' WHEN  IQI11C_AAA_REPAIR_MORT  = 1 THEN 'Positive' END As  IQI11C_AAA_REPAIR_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI11D_AAA_REPAIR_MORT = -1 THEN 'Non-eligible' WHEN   IQI11D_AAA_REPAIR_MORT = 0 THEN 'Eligible' WHEN  IQI11D_AAA_REPAIR_MORT  = 1 THEN 'Positive' END As  IQI11D_AAA_REPAIR_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI17A_ACUTE_STROKE_MORT = -1 THEN 'Non-eligible' WHEN   IQI17A_ACUTE_STROKE_MORT = 0 THEN 'Eligible' WHEN  IQI17A_ACUTE_STROKE_MORT  = 1 THEN 'Positive' END As  IQI17A_ACUTE_STROKE_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI17B_ACUTE_STROKE_MORT = -1 THEN 'Non-eligible' WHEN   IQI17B_ACUTE_STROKE_MORT = 0 THEN 'Eligible' WHEN  IQI17B_ACUTE_STROKE_MORT  = 1 THEN 'Positive' END As  IQI17B_ACUTE_STROKE_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IQI17C_ACUTE_STROKE_MORT = -1 THEN 'Non-eligible' WHEN   IQI17C_ACUTE_STROKE_MORT = 0 THEN 'Eligible' WHEN  IQI17C_ACUTE_STROKE_MORT  = 1 THEN 'Positive' END As  IQI17C_ACUTE_STROKE_MORT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  ANES_COMP = -1 THEN 'Non-eligible' WHEN   ANES_COMP = 0 THEN 'Eligible' WHEN  ANES_COMP  = 1 THEN 'Positive' END As  ANES_COMP&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  ASPIR_PNEUMONIA = -1 THEN 'Non-eligible' WHEN   ASPIR_PNEUMONIA = 0 THEN 'Eligible' WHEN  ASPIR_PNEUMONIA  = 1 THEN 'Positive' END As  ASPIR_PNEUMONIA&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  BIRTH_TRAUMA = -1 THEN 'Non-eligible' WHEN   BIRTH_TRAUMA = 0 THEN 'Eligible' WHEN  BIRTH_TRAUMA  = 1 THEN 'Positive' END As  BIRTH_TRAUMA&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  CABG_AFTER_PTCA = -1 THEN 'Non-eligible' WHEN   CABG_AFTER_PTCA = 0 THEN 'Eligible' WHEN  CABG_AFTER_PTCA  = 1 THEN 'Positive' END As  CABG_AFTER_PTCA&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  DEATH_LOW_MORT_DRG = -1 THEN 'Non-eligible' WHEN   DEATH_LOW_MORT_DRG = 0 THEN 'Eligible' WHEN  DEATH_LOW_MORT_DRG  = 1 THEN 'Positive' END As  DEATH_LOW_MORT_DRG&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  DECUB_ULCER_RISK_PAT = -1 THEN 'Non-eligible' WHEN   DECUB_ULCER_RISK_PAT = 0 THEN 'Eligible' WHEN  DECUB_ULCER_RISK_PAT  = 1 THEN 'Positive' END As  DECUB_ULCER_RISK_PAT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  DECUBITUS_ULCER = -1 THEN 'Non-eligible' WHEN   DECUBITUS_ULCER = 0 THEN 'Eligible' WHEN  DECUBITUS_ULCER  = 1 THEN 'Positive' END As  DECUBITUS_ULCER&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FAIL_RESCUE = -1 THEN 'Non-eligible' WHEN   FAIL_RESCUE = 0 THEN 'Eligible' WHEN  FAIL_RESCUE  = 1 THEN 'Positive' END As  FAIL_RESCUE&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FAIL_RESCUE_A = -1 THEN 'Non-eligible' WHEN   FAIL_RESCUE_A = 0 THEN 'Eligible' WHEN  FAIL_RESCUE_A  = 1 THEN 'Positive' END As  FAIL_RESCUE_A&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FAIL_RESCUE_B = -1 THEN 'Non-eligible' WHEN   FAIL_RESCUE_B = 0 THEN 'Eligible' WHEN  FAIL_RESCUE_B  = 1 THEN 'Positive' END As  FAIL_RESCUE_B&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FAIL_RESCUE_C = -1 THEN 'Non-eligible' WHEN   FAIL_RESCUE_C = 0 THEN 'Eligible' WHEN  FAIL_RESCUE_C  = 1 THEN 'Positive' END As  FAIL_RESCUE_C&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FAIL_RESCUE_D = -1 THEN 'Non-eligible' WHEN   FAIL_RESCUE_D = 0 THEN 'Eligible' WHEN  FAIL_RESCUE_D  = 1 THEN 'Positive' END As  FAIL_RESCUE_D&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FAIL_RESCUE_E = -1 THEN 'Non-eligible' WHEN   FAIL_RESCUE_E = 0 THEN 'Eligible' WHEN  FAIL_RESCUE_E  = 1 THEN 'Positive' END As  FAIL_RESCUE_E&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  FOREIGN_BODY_LEFT = -1 THEN 'Non-eligible' WHEN   FOREIGN_BODY_LEFT = 0 THEN 'Eligible' WHEN  FOREIGN_BODY_LEFT  = 1 THEN 'Positive' END As  FOREIGN_BODY_LEFT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  IN_HOSP_FRAC = -1 THEN 'Non-eligible' WHEN   IN_HOSP_FRAC = 0 THEN 'Eligible' WHEN  IN_HOSP_FRAC  = 1 THEN 'Positive' END As  IN_HOSP_FRAC&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  INFECTION_MED_CARE = -1 THEN 'Non-eligible' WHEN   INFECTION_MED_CARE = 0 THEN 'Eligible' WHEN  INFECTION_MED_CARE  = 1 THEN 'Positive' END As  INFECTION_MED_CARE&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  INTRAOP_NERVE_COMP = -1 THEN 'Non-eligible' WHEN   INTRAOP_NERVE_COMP = 0 THEN 'Eligible' WHEN  INTRAOP_NERVE_COMP  = 1 THEN 'Positive' END As  INTRAOP_NERVE_COMP&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  LATRO_PNEUMOTHORAX = -1 THEN 'Non-eligible' WHEN   LATRO_PNEUMOTHORAX = 0 THEN 'Eligible' WHEN  LATRO_PNEUMOTHORAX  = 1 THEN 'Positive' END As  LATRO_PNEUMOTHORAX&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  MALIG_HYPERTHERMIA = -1 THEN 'Non-eligible' WHEN   MALIG_HYPERTHERMIA = 0 THEN 'Eligible' WHEN  MALIG_HYPERTHERMIA  = 1 THEN 'Positive' END As  MALIG_HYPERTHERMIA&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OB_LACERATIONS = -1 THEN 'Non-eligible' WHEN   OB_LACERATIONS = 0 THEN 'Eligible' WHEN  OB_LACERATIONS  = 1 THEN 'Positive' END As  OB_LACERATIONS&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OB_TRA_CSECT = -1 THEN 'Non-eligible' WHEN   OB_TRA_CSECT = 0 THEN 'Eligible' WHEN  OB_TRA_CSECT  = 1 THEN 'Positive' END As  OB_TRA_CSECT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OB_TRA_VAG_W_INSTR = -1 THEN 'Non-eligible' WHEN   OB_TRA_VAG_W_INSTR = 0 THEN 'Eligible' WHEN  OB_TRA_VAG_W_INSTR  = 1 THEN 'Positive' END As  OB_TRA_VAG_W_INSTR&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OB_TRA_VAG_WO_INSTR = -1 THEN 'Non-eligible' WHEN   OB_TRA_VAG_WO_INSTR = 0 THEN 'Eligible' WHEN  OB_TRA_VAG_WO_INSTR  = 1 THEN 'Positive' END As  OB_TRA_VAG_WO_INSTR&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OB_WOUND_CSECT = -1 THEN 'Non-eligible' WHEN   OB_WOUND_CSECT = 0 THEN 'Eligible' WHEN  OB_WOUND_CSECT  = 1 THEN 'Positive' END As  OB_WOUND_CSECT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OB_WOUND_VAG = -1 THEN 'Non-eligible' WHEN   OB_WOUND_VAG = 0 THEN 'Eligible' WHEN  OB_WOUND_VAG  = 1 THEN 'Positive' END As  OB_WOUND_VAG&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  OTHER_OB_COMP_DEL = -1 THEN 'Non-eligible' WHEN   OTHER_OB_COMP_DEL = 0 THEN 'Eligible' WHEN  OTHER_OB_COMP_DEL  = 1 THEN 'Positive' END As  OTHER_OB_COMP_DEL&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POST_PART_URIN_INFECT = -1 THEN 'Non-eligible' WHEN   POST_PART_URIN_INFECT = 0 THEN 'Eligible' WHEN  POST_PART_URIN_INFECT  = 1 THEN 'Positive' END As  POST_PART_URIN_INFECT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_AMI = -1 THEN 'Non-eligible' WHEN   POSTOP_AMI = 0 THEN 'Eligible' WHEN  POSTOP_AMI  = 1 THEN 'Positive' END As  POSTOP_AMI&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_DERANGEMNTS = -1 THEN 'Non-eligible' WHEN   POSTOP_DERANGEMNTS = 0 THEN 'Eligible' WHEN  POSTOP_DERANGEMNTS  = 1 THEN 'Positive' END As  POSTOP_DERANGEMNTS&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_HEM = -1 THEN 'Non-eligible' WHEN   POSTOP_HEM = 0 THEN 'Eligible' WHEN  POSTOP_HEM  = 1 THEN 'Positive' END As  POSTOP_HEM&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_HIP_FRAC = -1 THEN 'Non-eligible' WHEN   POSTOP_HIP_FRAC = 0 THEN 'Eligible' WHEN  POSTOP_HIP_FRAC  = 1 THEN 'Positive' END As  POSTOP_HIP_FRAC&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN POSTOP_IATRO_CARD = -1 THEN 'Non-eligible' WHEN   POSTOP_IATRO_CARD = 0 THEN 'Eligible' WHEN POSTOP_IATRO_CARD  = 1 THEN 'Positive' END As POSTOP_IATRO_CARD&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_IATRO_NERV = -1 THEN 'Non-eligible' WHEN   POSTOP_IATRO_NERV = 0 THEN 'Eligible' WHEN  POSTOP_IATRO_NERV  = 1 THEN 'Positive' END As  POSTOP_IATRO_NERV&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_PUL_EMB = -1 THEN 'Non-eligible' WHEN   POSTOP_PUL_EMB = 0 THEN 'Eligible' WHEN  POSTOP_PUL_EMB  = 1 THEN 'Positive' END As  POSTOP_PUL_EMB&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_RESP_FAILURE = -1 THEN 'Non-eligible' WHEN   POSTOP_RESP_FAILURE = 0 THEN 'Eligible' WHEN  POSTOP_RESP_FAILURE  = 1 THEN 'Positive' END As  POSTOP_RESP_FAILURE&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_SEPSIS = -1 THEN 'Non-eligible' WHEN   POSTOP_SEPSIS = 0 THEN 'Eligible' WHEN  POSTOP_SEPSIS  = 1 THEN 'Positive' END As  POSTOP_SEPSIS&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  POSTOP_WOUND_DEHIS = -1 THEN 'Non-eligible' WHEN   POSTOP_WOUND_DEHIS = 0 THEN 'Eligible' WHEN  POSTOP_WOUND_DEHIS  = 1 THEN 'Positive' END As  POSTOP_WOUND_DEHIS&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  REOPEN_SURG_SITE = -1 THEN 'Non-eligible' WHEN   REOPEN_SURG_SITE = 0 THEN 'Eligible' WHEN  REOPEN_SURG_SITE  = 1 THEN 'Positive' END As  REOPEN_SURG_SITE&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  SUTURE_LACERATION = -1 THEN 'Non-eligible' WHEN   SUTURE_LACERATION = 0 THEN 'Eligible' WHEN  SUTURE_LACERATION  = 1 THEN 'Positive' END As  SUTURE_LACERATION&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  TECH_DIFF_PROC = -1 THEN 'Non-eligible' WHEN   TECH_DIFF_PROC = 0 THEN 'Eligible' WHEN  TECH_DIFF_PROC  = 1 THEN 'Positive' END As  TECH_DIFF_PROC&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  TRANSF_REACTION = -1 THEN 'Non-eligible' WHEN   TRANSF_REACTION = 0 THEN 'Eligible' WHEN  TRANSF_REACTION  = 1 THEN 'Positive' END As  TRANSF_REACTION&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN  UTERINE_RUPTURE = -1 THEN 'Non-eligible' WHEN   UTERINE_RUPTURE = 0 THEN 'Eligible' WHEN  UTERINE_RUPTURE  = 1 THEN 'Positive' END As  UTERINE_RUPTURE&#xD;&#xA;       , MMBR_OF_ASTHM_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_CKD_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_COPD_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_CHF_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_CAD_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_CF_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_DIABTS_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_HIV_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_HTN_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_OBSTY_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_OPD_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_PREDIABTS_RGSTRY_CDS&#xD;&#xA;       , MMBR_OF_TBCCO_RGSTRY_CDS&#xD;&#xA;       , IS_ENC_MDCR_CDS&#xD;&#xA;       , IS_ENC_MDCD_CDS&#xD;&#xA;       , PCP_PRMRY_DEPT_SK&#xD;&#xA;       , PCP_PROVDR_SK&#xD;&#xA;       , PAT_HAS_FLLWP_DCMNTD_CDS&#xD;&#xA;       , REV_LOC_CDS&#xD;&#xA;       , I.SRC_CD&#xD;&#xA;       , &#xD;&#xA;CASE PX_IND &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END AS PX_IND&#xD;&#xA;       , IN_DEMOGRAPHICS_DISTRIB&#xD;&#xA;       , IN_ANALYSIS_A1_CDS&#xD;&#xA;       , IN_ANALYSIS_A1&#xD;&#xA;       , IN_ANALYSIS_A2_CDS&#xD;&#xA;       , IN_ANALYSIS_A2&#xD;&#xA;       , IN_ANALYSIS_D1_CDS&#xD;&#xA;       , IN_ANALYSIS_D1&#xD;&#xA;       , IN_ANALYSIS_D2_CDS&#xD;&#xA;       , IN_ANALYSIS_D2&#xD;&#xA;       , IN_ANALYSIS_D3_CDS&#xD;&#xA;       , IN_ANALYSIS_D3&#xD;&#xA;       , IN_ANALYSIS_E1_CDS&#xD;&#xA;       , IN_ANALYSIS_E1&#xD;&#xA;       , IN_ANALYSIS_E2_CDS&#xD;&#xA;       , IN_ANALYSIS_E2&#xD;&#xA;       , IN_ANALYSIS_E4_CDS&#xD;&#xA;       , IN_ANALYSIS_E4&#xD;&#xA;       , IN_ANALYSIS_E7_CDS&#xD;&#xA;       , IN_ANALYSIS_E7&#xD;&#xA;       , IN_ANALYSIS_I1_CDS&#xD;&#xA;       , IN_ANALYSIS_I1&#xD;&#xA;       , IN_ANALYSIS_I3_CDS&#xD;&#xA;       , IN_ANALYSIS_I3&#xD;&#xA;       , IN_ANALYSIS_I4_CDS&#xD;&#xA;       , IN_ANALYSIS_I4&#xD;&#xA;       , IN_ANALYSIS_I5_CDS&#xD;&#xA;       , IN_ANALYSIS_I5&#xD;&#xA;       , IN_ANALYSIS_I6_CDS&#xD;&#xA;       , IN_ANALYSIS_I6&#xD;&#xA;       , IN_ANALYSIS_L2_CDS&#xD;&#xA;       , IN_ANALYSIS_L2&#xD;&#xA;       , IN_ANALYSIS_L3_CDS&#xD;&#xA;       , IN_ANALYSIS_L3&#xD;&#xA;       , IN_ANALYSIS_L5_CDS&#xD;&#xA;       , IN_ANALYSIS_L5&#xD;&#xA;       , IN_ANALYSIS_L6_CDS&#xD;&#xA;       , IN_ANALYSIS_L6&#xD;&#xA;       , IN_ANALYSIS_L8_CDS&#xD;&#xA;       , IN_ANALYSIS_L8&#xD;&#xA;       , IN_ANALYSIS_M2_CDS&#xD;&#xA;       , IN_ANALYSIS_M2&#xD;&#xA;       , IN_ANALYSIS_M3_CDS&#xD;&#xA;       , IN_ANALYSIS_M3&#xD;&#xA;       , IN_ANALYSIS_M4_CDS&#xD;&#xA;       , IN_ANALYSIS_M4&#xD;&#xA;       , IN_ANALYSIS_N1_CDS&#xD;&#xA;       , IN_ANALYSIS_N1&#xD;&#xA;       , IN_ANALYSIS_N2_CDS&#xD;&#xA;       , IN_ANALYSIS_N2&#xD;&#xA;       , IN_ANALYSIS_N3_CDS&#xD;&#xA;       , IN_ANALYSIS_N3&#xD;&#xA;       , IN_ANALYSIS_N4_CDS&#xD;&#xA;       , IN_ANALYSIS_N4&#xD;&#xA;       , IN_ANALYSIS_N5_CDS&#xD;&#xA;       , IN_ANALYSIS_N5&#xD;&#xA;       , IN_ANALYSIS_N6_CDS&#xD;&#xA;       , IN_ANALYSIS_N6&#xD;&#xA;       , IN_ANALYSIS_O2_CDS&#xD;&#xA;       , IN_ANALYSIS_O2&#xD;&#xA;       , IN_ANALYSIS_O3_CDS&#xD;&#xA;       , IN_ANALYSIS_O3&#xD;&#xA;       , IN_ANALYSIS_O4_CDS&#xD;&#xA;       , IN_ANALYSIS_O4&#xD;&#xA;       , IN_ANALYSIS_P1_CDS&#xD;&#xA;       , IN_ANALYSIS_P1&#xD;&#xA;       , IN_ANALYSIS_P2_CDS&#xD;&#xA;       , IN_ANALYSIS_P2&#xD;&#xA;       , IN_ANALYSIS_P3_CDS&#xD;&#xA;       , IN_ANALYSIS_P3&#xD;&#xA;       , IN_ANALYSIS_P4_CDS&#xD;&#xA;       , IN_ANALYSIS_P4&#xD;&#xA;       , IN_ANALYSIS_P5_CDS&#xD;&#xA;       , IN_ANALYSIS_P5&#xD;&#xA;       , IN_ANALYSIS_Q11822_1_CDS&#xD;&#xA;       , IN_ANALYSIS_Q11822_1&#xD;&#xA;       , IN_ANALYSIS_R1_CDS&#xD;&#xA;       , IN_ANALYSIS_R1&#xD;&#xA;       , IN_ANALYSIS_R2_CDS&#xD;&#xA;       , IN_ANALYSIS_R2&#xD;&#xA;       , IN_ANALYSIS_R3_CDS&#xD;&#xA;       , IN_ANALYSIS_R3&#xD;&#xA;       , IN_ANALYSIS_R4_CDS&#xD;&#xA;       , IN_ANALYSIS_R4&#xD;&#xA;       , IN_ANALYSIS_R5_CDS&#xD;&#xA;       , IN_ANALYSIS_R5&#xD;&#xA;       , IN_ANALYSIS_T1_CDS&#xD;&#xA;       , IN_ANALYSIS_T1&#xD;&#xA;       , IN_ANALYSIS_T3_CDS&#xD;&#xA;       , IN_ANALYSIS_T3&#xD;&#xA;       , IN_ANALYSIS_T5_CDS&#xD;&#xA;       , IN_ANALYSIS_T5&#xD;&#xA;       , IN_ANALYSIS_T7_CDS&#xD;&#xA;       , IN_ANALYSIS_T7&#xD;&#xA;       , IN_ANALYSIS_V2_CDS&#xD;&#xA;       , IN_ANALYSIS_V2&#xD;&#xA;       , IN_ANALYSIS_V3_CDS&#xD;&#xA;       , IN_ANALYSIS_V3&#xD;&#xA;       , IN_CAHPS_CMS_1&#xD;&#xA;       , IN_CAHPS_CMS_1_CDS&#xD;&#xA;       , IN_CAHPS_CMS_10&#xD;&#xA;       , IN_CAHPS_CMS_10_CDS&#xD;&#xA;       , IN_CAHPS_CMS_11&#xD;&#xA;       , IN_CAHPS_CMS_11_CDS&#xD;&#xA;       , IN_CAHPS_CMS_12&#xD;&#xA;       , IN_CAHPS_CMS_12_CDS&#xD;&#xA;       , IN_CAHPS_CMS_13CL&#xD;&#xA;       , IN_CAHPS_CMS_13CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_14&#xD;&#xA;       , IN_CAHPS_CMS_14_CDS&#xD;&#xA;       , IN_CAHPS_CMS_15CL&#xD;&#xA;       , IN_CAHPS_CMS_15CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_16CL&#xD;&#xA;       , IN_CAHPS_CMS_16CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_18&#xD;&#xA;       , IN_CAHPS_CMS_18_CDS&#xD;&#xA;       , IN_CAHPS_CMS_19CL&#xD;&#xA;       , IN_CAHPS_CMS_19CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_2&#xD;&#xA;       , IN_CAHPS_CMS_2_CDS&#xD;&#xA;       , IN_CAHPS_CMS_20&#xD;&#xA;       , IN_CAHPS_CMS_20_CDS&#xD;&#xA;       , IN_CAHPS_CMS_21CL&#xD;&#xA;       , IN_CAHPS_CMS_21CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_22CL&#xD;&#xA;       , IN_CAHPS_CMS_22CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_23&#xD;&#xA;       , IN_CAHPS_CMS_23_CDS&#xD;&#xA;       , IN_CAHPS_CMS_24&#xD;&#xA;       , IN_CAHPS_CMS_24_CDS&#xD;&#xA;       , IN_CAHPS_CMS_25&#xD;&#xA;       , IN_CAHPS_CMS_25_CDS&#xD;&#xA;       , IN_CAHPS_CMS_26&#xD;&#xA;       , IN_CAHPS_CMS_26_CDS&#xD;&#xA;       , IN_CAHPS_CMS_27&#xD;&#xA;       , IN_CAHPS_CMS_27_CDS&#xD;&#xA;       , IN_CAHPS_CMS_28&#xD;&#xA;       , IN_CAHPS_CMS_28_CDS&#xD;&#xA;       , IN_CAHPS_CMS_29A&#xD;&#xA;       , IN_CAHPS_CMS_29A_CDS&#xD;&#xA;       , IN_CAHPS_CMS_29B&#xD;&#xA;       , IN_CAHPS_CMS_29B_CDS&#xD;&#xA;       , IN_CAHPS_CMS_29C&#xD;&#xA;       , IN_CAHPS_CMS_29C_CDS&#xD;&#xA;       , IN_CAHPS_CMS_29D&#xD;&#xA;       , IN_CAHPS_CMS_29D_CDS&#xD;&#xA;       , IN_CAHPS_CMS_29E&#xD;&#xA;       , IN_CAHPS_CMS_29E_CDS&#xD;&#xA;       , IN_CAHPS_CMS_3&#xD;&#xA;       , IN_CAHPS_CMS_3_CDS&#xD;&#xA;       , IN_CAHPS_CMS_30&#xD;&#xA;       , IN_CAHPS_CMS_30_CDS&#xD;&#xA;       , IN_CAHPS_CMS_33CL&#xD;&#xA;       , IN_CAHPS_CMS_33CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_34&#xD;&#xA;       , IN_CAHPS_CMS_34_CDS&#xD;&#xA;       , IN_CAHPS_CMS_37CL&#xD;&#xA;       , IN_CAHPS_CMS_37CL_CDS&#xD;&#xA;       , IN_CAHPS_CMS_38&#xD;&#xA;       , IN_CAHPS_CMS_38_CDS&#xD;&#xA;       , IN_CAHPS_CMS_39&#xD;&#xA;       , IN_CAHPS_CMS_39_CDS&#xD;&#xA;       , IN_CAHPS_CMS_40&#xD;&#xA;       , IN_CAHPS_CMS_40_CDS&#xD;&#xA;       , IN_CAHPS_CMS_41&#xD;&#xA;       , IN_CAHPS_CMS_41_CDS&#xD;&#xA;       , IN_CAHPS_CMS_6&#xD;&#xA;       , IN_CAHPS_CMS_6_CDS&#xD;&#xA;       , IN_CAHPS_CMS_7&#xD;&#xA;       , IN_CAHPS_CMS_7_CDS&#xD;&#xA;       , IN_CAHPS_CMS_8&#xD;&#xA;       , IN_CAHPS_CMS_8_CDS , &#xD;&#xA;CASE READMSN_INDX_ADMSN_IND &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END AS READMISSION_INDX_ADMSN_IND&#xD;&#xA;       , &#xD;&#xA;CASE READMSN_READMSN_IND &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END  AS READMISSION_READMSN_IND&#xD;&#xA;       , READMSN_PLN_UNPLN AS READMISSION_PLN_UNPLN&#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_AMI &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_AMI_IND &#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_HF &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_HF_IND&#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_COPD &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_COPD_IND&#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_PNEU &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_PNEU_IND&#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_CABG &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_CABG_IND&#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_THATKA &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_THATKA_IND&#xD;&#xA;&#x9;, &#xD;&#xA;CASE READMSN_SEPSIS &#xD;&#xA;WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' ELSE 'Not Applicable' END AS READMISSION_SEPSIS_IND&#xD;&#xA;       , READMSN_CASE_IND&#xD;&#xA;FROM CUBESPRD.INPTNT_DIM I&#xD;&#xA;INNER JOIN CUBESPRD.INPTNT_FACT IF ON I.INPTNT_VST_SK = IF.INPTNT_VST_SK'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientFact'
set @FriendlyName='InpatientFact'
set @xml='SELECT INPTNT_VST_SK&#xD;&#xA;       , SRC_ENCNT_ID&#xD;&#xA;       , CLNC_INPTNT_ADMT_DT&#xD;&#xA;       , CLNC_INPTNT_ADMT_TS_SK &#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , AGE_YRS_AT_CLNC_INPTNT_ADMT&#xD;&#xA;&#x9;   , CASE WHEN AGE_YRS_AT_CLNC_INPTNT_ADMT=0 THEN 0 &#xD;&#xA;&#x9;&#x9;WHEN (AGE_YRS_AT_CLNC_INPTNT_ADMT&lt;0 &#xD;&#xA;&#x9;&#x9;OR AGE_YRS_AT_CLNC_INPTNT_ADMT&gt; 120) THEN NULL ELSE Log(AGE_YRS_AT_CLNC_INPTNT_ADMT)&#xD;&#xA;&#x9;&#x9;END As AGE_YRS_AT_CLNC_INPTNT_ADMT_Log&#xD;&#xA;       , AGE_MNTHS_AT_CLNC_INPTNT_ADMT&#xD;&#xA;       , AGE_DYS_AT_CLNC_INPTNT_ADMT&#xD;&#xA;       , LOS_DYS_CLNC_INPTNT&#xD;&#xA;&#x9;   , LOS_HRS_CLNC_INPTNT&#xD;&#xA;       , CASE WHEN LOS_DYS_CLNC_INPTNT=0 THEN 0 &#xD;&#xA;&#x9;&#x9;WHEN LOS_DYS_CLNC_INPTNT&lt;0 THEN NULL ELSE Log(LOS_DYS_CLNC_INPTNT)&#xD;&#xA;&#x9;&#x9;END As LOS_DYS_CLNC_INPTNT_Log&#xD;&#xA;       , CASE WHEN LOS_HRS_CLNC_INPTNT=0 THEN 0 &#xD;&#xA;&#x9;&#x9;WHEN LOS_HRS_CLNC_INPTNT &lt; 0 THEN NULL ELSE Log(LOS_HRS_CLNC_INPTNT)&#xD;&#xA;&#x9;&#x9;END As LOS_HRS_CLNC_INPTNT_Log&#xD;&#xA;       , INPTNT_APPT_MADE_DT&#xD;&#xA;       , HSPTL_ADMT_DT&#xD;&#xA;       , HSPTL_ADMT_TS_SK&#xD;&#xA;       , HSPTL_DSCRG_DT&#xD;&#xA;       , HSPTL_DSCRG_TS_SK&#xD;&#xA;       , PRMY_CDD_PRCDR_SK&#xD;&#xA;       , PRMY_CDD_DIAG_SK&#xD;&#xA;       , LOS_DYS_EXPCT_INPTNT&#xD;&#xA;&#x9;   , PTNT_SK &#xD;&#xA;&#x9;   , HSPTL_ADMT_PROVDR_SK&#xD;&#xA;       , HSPTL_DSCRG_PROVDR_SK&#xD;&#xA;  FROM CUBESPRD.INPTNT_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientPatientClassDim'
set @FriendlyName='InpatientPatientClassDim'
set @xml='SELECT DISTINCT&#xD;&#xA;INT4(IP.PTNT_CL_CDS) &#xD;&#xA;AS PTNT_CL_CDS, &#xD;&#xA;IP.PTNT_CL_DESC &#xD;&#xA;FROM CUBESPRD.INPTNT_DIM IP &#xD;&#xA;WHERE ((IP.INPTNT_VST_SK &gt; 0) &#xD;&#xA;AND (INT4(IP.PTNT_CL_CDS) &gt; 0))'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientAdmitSourceDim'
set @FriendlyName='InpatientAdmitSourceDim'
set @xml='SELECT DISTINCT&#xD;&#xA;ADMT_SRC_CDS, &#xD;&#xA;ADMT_SRC_DESC &#xD;&#xA;FROM CUBESPRD.INPTNT_DIM WHERE ADMT_SRC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientAdmitTypeDim'
set @FriendlyName='InpatientAdmitTypeDim'
set @xml='SELECT DISTINCT ADMT_TYPE_CDS, ADMT_TYPE_DESC&#xD;&#xA;FROM CUBESPRD.INPTNT_DIM WHERE TRIM(ADMT_TYPE_CDS) IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientDischargeDispositionDim'
set @FriendlyName='InpatientDischargeDispositionDim'
set @xml='SELECT DISTINCT&#xD;&#xA;INT4(IP.DSCRG_DSPSTN_CDS) AS DSCRG_DSPSTN_CDS, &#xD;&#xA;IP.DSCRG_DSPSTN_DESC&#xD;&#xA;FROM CUBESPRD.INPTNT_DIM IP &#xD;&#xA;WHERE ((IP.INPTNT_VST_SK &gt; 0) &#xD;&#xA;AND (INT4(IP.DSCRG_DSPSTN_CDS) &gt; 0)) AND (INT4(IP.DSCRG_DSPSTN_CDS) &lt;&gt;101)'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='InpatientDischargeDestinationDim'
set @FriendlyName='InpatientDischargeDestinationDim'
set @xml='SELECT DISTINCT&#xD;&#xA;DSCRG_DSTN_CDS, &#xD;&#xA;DSCRG_DSTN_DESC&#xD;&#xA;FROM CUBESPRD.INPTNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncounterEncouterypeDim'
set @FriendlyName='EncounterEncouterTypeDim'
set @xml='SELECT DISTINCT &#xD;&#xA;ENCNT_TYPE_CDS, ENCNT_TYPE_DESC&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncouterBaseClassDim'
set @FriendlyName='EncouterBaseClassDim'
set @xml='SELECT DISTINCT&#xD;&#xA;PTNT_BSE_CLSS_CDS, PTNT_BSE_CLSS_NM&#xD;&#xA;FROM  CUBESPRD.ENCNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncounterPatientStatusDim'
set @FriendlyName='EncounterPatientStatusDim'
set @xml='SELECT DISTINCT &#xD;&#xA;PTNT_STS_CDS, PTNT_STS_DESC&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM WHERE PTNT_STS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncounterLevelofCareDim'
set @FriendlyName='EncounterLevelofCareDim'
set @xml='SELECT DISTINCT &#xD;&#xA;LEVL_OF_CARE_CDS, LEVL_OF_CARE_DESC&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM WHERE LEVL_OF_CARE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DW_TM_OF_DY_DIM'
set @FriendlyName='TimeDim'
set @xml='SELECT TM_OF_DY_SK&#xD;&#xA;       , TM_OF_DY&#xD;&#xA;       , HR_OF_DY&#xD;&#xA;       , MN_OF_DY&#xD;&#xA;       , SCND_OF_DY&#xD;&#xA;&#xD;&#xA;  FROM EDW_PRD.DW.TM_OF_DY_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientDim'
set @FriendlyName='OutpatientDim'
set @xml='SELECT OUTPTNT_VST_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , SRC_TYPE&#xD;&#xA;       , APPT_STTS_CDS&#xD;&#xA;       , APPT_STTS_NM&#xD;&#xA;       , VST_FNNCL_CLSS_CDS&#xD;&#xA;       , ADMT_CNF_STT_CDS&#xD;&#xA;       , APPT_CNF_STT_CDS&#xD;&#xA;       , CNCL_RSN_CDS&#xD;&#xA;       , AGE_YRS_AT_ENCNT&#xD;&#xA;       , AGE_MNTHS_AT_ENCNT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AGE_DYS_AT_ENCNT &lt; 0 THEN NULL ELSE AGE_DYS_AT_ENCNT &#xD;&#xA;END AS AGE_DYS_AT_ENCNT&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN MDCTN_RVWD_IND= 0 THEN 'No' WHEN MDCTN_RVWD_IND= 1 THEN 'Yes' END AS MDCTN_RVWD_IND&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN PRBLM_LST_RVWD= 0 THEN 'No' WHEN PRBLM_LST_RVWD= 1 THEN 'Yes' END AS PRBLM_LST_RVWD&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN AVS_PRNTD_IND= 0 THEN 'No' WHEN AVS_PRNTD_IND= 1 THEN 'Yes' END AS AVS_PRNTD_IND&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN ALLRG_RVWD_IND= 0 THEN 'No' WHEN ALLRG_RVWD_IND= 1 THEN 'Yes' END AS ALLRG_RVWD_IND&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN CLSD_IND= 0 THEN 'No' WHEN CLSD_IND= 1 THEN 'Yes' END AS CLSD_IND&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN APPT_CMPLT_IND= 0 THEN 'No' WHEN APPT_CMPLT_IND= 1 THEN 'Yes' END AS APPT_CMPLT_IND&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN WLKN_IND= 0 THEN 'No' WHEN WLKN_IND= 1 THEN 'Yes' END AS WLKN_IND&#xD;&#xA;       , &#xD;&#xA;CASE &#xD;&#xA;WHEN RFRRL_RQRD_IND= 0 THEN 'No' WHEN RFRRL_RQRD_IND= 1 THEN 'Yes' END AS RFRRL_RQRD_IND&#xD;&#xA;, AS_ANALYSIS_C185_CDS&#xD;&#xA;       , AS_ANALYSIS_C185&#xD;&#xA;       , AS_ANALYSIS_C186_CDS&#xD;&#xA;       , AS_ANALYSIS_C186&#xD;&#xA;       , AS_ANALYSIS_C3_CDS&#xD;&#xA;       , AS_ANALYSIS_C3&#xD;&#xA;       , AS_ANALYSIS_D2_CDS&#xD;&#xA;       , AS_ANALYSIS_D2&#xD;&#xA;       , AS_ANALYSIS_D3_CDS&#xD;&#xA;       , AS_ANALYSIS_D3&#xD;&#xA;       , AS_ANALYSIS_D98_CDS&#xD;&#xA;       , AS_ANALYSIS_D98&#xD;&#xA;       , AS_ANALYSIS_D99_CDS&#xD;&#xA;       , AS_ANALYSIS_D99&#xD;&#xA;       , AS_ANALYSIS_Q11822_1_CDS&#xD;&#xA;       , AS_ANALYSIS_Q11822_1&#xD;&#xA;       , AS_CAHPS_OSC_1&#xD;&#xA;       , AS_CAHPS_OSC_1_CDS&#xD;&#xA;       , AS_CAHPS_OSC_10&#xD;&#xA;       , AS_CAHPS_OSC_10_CDS&#xD;&#xA;       , AS_CAHPS_OSC_11CL&#xD;&#xA;       , AS_CAHPS_OSC_11CL_CDS&#xD;&#xA;       , AS_CAHPS_OSC_12CL&#xD;&#xA;       , AS_CAHPS_OSC_12CL_CDS&#xD;&#xA;       , AS_CAHPS_OSC_13&#xD;&#xA;       , AS_CAHPS_OSC_13_CDS&#xD;&#xA;       , AS_CAHPS_OSC_14&#xD;&#xA;       , AS_CAHPS_OSC_14_CDS&#xD;&#xA;       , AS_CAHPS_OSC_15&#xD;&#xA;       , AS_CAHPS_OSC_15_CDS&#xD;&#xA;       , AS_CAHPS_OSC_16&#xD;&#xA;       , AS_CAHPS_OSC_16_CDS&#xD;&#xA;       , AS_CAHPS_OSC_17&#xD;&#xA;       , AS_CAHPS_OSC_17_CDS&#xD;&#xA;       , AS_CAHPS_OSC_18&#xD;&#xA;       , AS_CAHPS_OSC_18_CDS&#xD;&#xA;       , AS_CAHPS_OSC_19&#xD;&#xA;       , AS_CAHPS_OSC_19_CDS&#xD;&#xA;       , AS_CAHPS_OSC_2&#xD;&#xA;       , AS_CAHPS_OSC_2_CDS&#xD;&#xA;       , AS_CAHPS_OSC_20&#xD;&#xA;       , AS_CAHPS_OSC_20_CDS&#xD;&#xA;       , AS_CAHPS_OSC_21&#xD;&#xA;       , AS_CAHPS_OSC_21_CDS&#xD;&#xA;       , AS_CAHPS_OSC_22&#xD;&#xA;       , AS_CAHPS_OSC_22_CDS&#xD;&#xA;       , AS_CAHPS_OSC_23&#xD;&#xA;       , AS_CAHPS_OSC_23_CDS&#xD;&#xA;       , AS_CAHPS_OSC_24&#xD;&#xA;       , AS_CAHPS_OSC_24_CDS&#xD;&#xA;       , AS_CAHPS_OSC_3&#xD;&#xA;       , AS_CAHPS_OSC_3_CDS&#xD;&#xA;       , AS_CAHPS_OSC_4&#xD;&#xA;       , AS_CAHPS_OSC_4_CDS&#xD;&#xA;       , AS_CAHPS_OSC_5&#xD;&#xA;       , AS_CAHPS_OSC_5_CDS&#xD;&#xA;       , AS_CAHPS_OSC_6&#xD;&#xA;       , AS_CAHPS_OSC_6_CDS&#xD;&#xA;       , AS_CAHPS_OSC_7&#xD;&#xA;       , AS_CAHPS_OSC_7_CDS&#xD;&#xA;       , AS_CAHPS_OSC_8&#xD;&#xA;       , AS_CAHPS_OSC_8_CDS&#xD;&#xA;       , AS_CAHPS_OSC_9&#xD;&#xA;       , AS_CAHPS_OSC_9_CDS&#xD;&#xA;       , PG_OU_SURVEY_ID&#xD;&#xA;       , OU_ANALYSIS_A4_CDS&#xD;&#xA;       , OU_ANALYSIS_A4&#xD;&#xA;       , OU_ANALYSIS_A48_CDS&#xD;&#xA;       , OU_ANALYSIS_A48&#xD;&#xA;       , OU_ANALYSIS_A6_CDS&#xD;&#xA;       , OU_ANALYSIS_A6&#xD;&#xA;       , OU_ANALYSIS_A7_CDS&#xD;&#xA;       , OU_ANALYSIS_A7&#xD;&#xA;       , OU_ANALYSIS_C121_CDS&#xD;&#xA;       , OU_ANALYSIS_C121&#xD;&#xA;       , OU_ANALYSIS_C2_CDS&#xD;&#xA;       , OU_ANALYSIS_C2&#xD;&#xA;       , OU_ANALYSIS_C6_CDS&#xD;&#xA;       , OU_ANALYSIS_C6&#xD;&#xA;       , OU_ANALYSIS_C7_CDS&#xD;&#xA;       , OU_ANALYSIS_C7&#xD;&#xA;       , OU_ANALYSIS_C8_CDS&#xD;&#xA;       , OU_ANALYSIS_C8&#xD;&#xA;       , OU_ANALYSIS_D2_CDS&#xD;&#xA;       , OU_ANALYSIS_D2&#xD;&#xA;       , OU_ANALYSIS_D3_CDS&#xD;&#xA;       , OU_ANALYSIS_D3&#xD;&#xA;       , OU_ANALYSIS_E1_CDS&#xD;&#xA;       , OU_ANALYSIS_E1&#xD;&#xA;       , OU_ANALYSIS_E101_CDS&#xD;&#xA;       , OU_ANALYSIS_E101&#xD;&#xA;       , OU_ANALYSIS_E102_CDS&#xD;&#xA;       , OU_ANALYSIS_E102&#xD;&#xA;       , OU_ANALYSIS_E14_CDS&#xD;&#xA;       , OU_ANALYSIS_E14&#xD;&#xA;       , OU_ANALYSIS_E38_CDS&#xD;&#xA;       , OU_ANALYSIS_E38&#xD;&#xA;       , OU_ANALYSIS_E4_CDS&#xD;&#xA;       , OU_ANALYSIS_E4&#xD;&#xA;       , OU_ANALYSIS_Q11822_1_CDS&#xD;&#xA;       , OU_ANALYSIS_Q11822_1&#xD;&#xA;       , OU_DEMOGRAPHICS_DAYWEEK_CDS&#xD;&#xA;       , OU_DEMOGRAPHICS_DAYWEEK&#xD;&#xA;       , PG_UC_SURVEY_ID&#xD;&#xA;       , UC_ANALYSIS_A2_CDS&#xD;&#xA;       , UC_ANALYSIS_A2&#xD;&#xA;       , UC_ANALYSIS_A28_CDS&#xD;&#xA;       , UC_ANALYSIS_A28&#xD;&#xA;       , UC_ANALYSIS_A3_CDS&#xD;&#xA;       , UC_ANALYSIS_A3&#xD;&#xA;       , UC_ANALYSIS_A4_CDS&#xD;&#xA;       , UC_ANALYSIS_A4&#xD;&#xA;       , UC_ANALYSIS_A5_CDS&#xD;&#xA;       , UC_ANALYSIS_A5&#xD;&#xA;       , UC_ANALYSIS_B1_CDS&#xD;&#xA;       , UC_ANALYSIS_B1&#xD;&#xA;       , UC_ANALYSIS_B3_CDS&#xD;&#xA;       , UC_ANALYSIS_B3&#xD;&#xA;       , UC_ANALYSIS_B4_CDS&#xD;&#xA;       , UC_ANALYSIS_B4&#xD;&#xA;       , UC_ANALYSIS_B5_CDS&#xD;&#xA;       , UC_ANALYSIS_B5&#xD;&#xA;       , UC_ANALYSIS_B61_CDS&#xD;&#xA;       , UC_ANALYSIS_B61&#xD;&#xA;       , UC_ANALYSIS_C1_CDS&#xD;&#xA;       , UC_ANALYSIS_C1&#xD;&#xA;       , UC_ANALYSIS_C2_CDS&#xD;&#xA;       , UC_ANALYSIS_C2&#xD;&#xA;       , UC_ANALYSIS_C34_CDS&#xD;&#xA;       , UC_ANALYSIS_C34&#xD;&#xA;       , UC_ANALYSIS_C4_CDS&#xD;&#xA;       , UC_ANALYSIS_C4&#xD;&#xA;       , UC_ANALYSIS_C5_CDS&#xD;&#xA;       , UC_ANALYSIS_C5&#xD;&#xA;       , UC_ANALYSIS_C60_CDS&#xD;&#xA;       , UC_ANALYSIS_C60&#xD;&#xA;       , UC_ANALYSIS_C7_CDS&#xD;&#xA;       , UC_ANALYSIS_C7&#xD;&#xA;       , UC_ANALYSIS_D2_CDS&#xD;&#xA;       , UC_ANALYSIS_D2&#xD;&#xA;       , UC_ANALYSIS_D3_CDS&#xD;&#xA;       , UC_ANALYSIS_D3&#xD;&#xA;       , UC_ANALYSIS_D4_CDS&#xD;&#xA;       , UC_ANALYSIS_D4&#xD;&#xA;       , UC_ANALYSIS_D58_CDS&#xD;&#xA;       , UC_ANALYSIS_D58&#xD;&#xA;       , UC_ANALYSIS_D59_CDS&#xD;&#xA;       , UC_ANALYSIS_D59&#xD;&#xA;       , UC_ANALYSIS_E1_CDS&#xD;&#xA;       , UC_ANALYSIS_E1&#xD;&#xA;       , UC_ANALYSIS_E2_CDS&#xD;&#xA;       , UC_ANALYSIS_E2&#xD;&#xA;       , UC_ANALYSIS_E3_CDS&#xD;&#xA;       , UC_ANALYSIS_E3&#xD;&#xA;       , UC_ANALYSIS_F1_CDS&#xD;&#xA;       , UC_ANALYSIS_F1&#xD;&#xA;       , UC_ANALYSIS_F120_CDS&#xD;&#xA;       , UC_ANALYSIS_F120&#xD;&#xA;       , UC_ANALYSIS_F2_CDS&#xD;&#xA;       , UC_ANALYSIS_F2&#xD;&#xA;       , UC_ANALYSIS_F4_CDS&#xD;&#xA;       , UC_ANALYSIS_F4&#xD;&#xA;       , UC_ANALYSIS_F41_CDS&#xD;&#xA;       , UC_ANALYSIS_F41&#xD;&#xA;       , UC_ANALYSIS_Q11822_1_CDS&#xD;&#xA;       , UC_ANALYSIS_Q11822_1&#xD;&#xA;       , UC_DEMOGRAPHICS_DAYWEEK_CDS&#xD;&#xA;       , UC_DEMOGRAPHICS_DAYWEEK&#xD;&#xA;       , PG_MD_SURVEY_ID&#xD;&#xA;       , MD_ANALYSIS_A1_CDS&#xD;&#xA;       , MD_ANALYSIS_A1&#xD;&#xA;       , MD_ANALYSIS_A14_CDS&#xD;&#xA;       , MD_ANALYSIS_A14&#xD;&#xA;       , MD_ANALYSIS_CP1_CDS&#xD;&#xA;       , MD_ANALYSIS_CP1&#xD;&#xA;       , MD_ANALYSIS_CP10_CDS&#xD;&#xA;       , MD_ANALYSIS_CP10&#xD;&#xA;       , MD_ANALYSIS_CP2_CDS&#xD;&#xA;       , MD_ANALYSIS_CP2&#xD;&#xA;       , MD_ANALYSIS_CP3_CDS&#xD;&#xA;       , MD_ANALYSIS_CP3&#xD;&#xA;       , MD_ANALYSIS_CP4_CDS&#xD;&#xA;       , MD_ANALYSIS_CP4&#xD;&#xA;       , MD_ANALYSIS_CP5_CDS&#xD;&#xA;       , MD_ANALYSIS_CP5&#xD;&#xA;       , MD_ANALYSIS_CP6_CDS&#xD;&#xA;       , MD_ANALYSIS_CP6&#xD;&#xA;       , MD_ANALYSIS_CP7_CDS&#xD;&#xA;       , MD_ANALYSIS_CP7&#xD;&#xA;       , MD_ANALYSIS_CP8_CDS&#xD;&#xA;       , MD_ANALYSIS_CP8&#xD;&#xA;       , MD_ANALYSIS_CP9_CDS&#xD;&#xA;       , MD_ANALYSIS_CP9&#xD;&#xA;       , MD_ANALYSIS_I1_CDS&#xD;&#xA;       , MD_ANALYSIS_I1&#xD;&#xA;       , MD_ANALYSIS_I2_CDS&#xD;&#xA;       , MD_ANALYSIS_I2&#xD;&#xA;       , MD_ANALYSIS_I3_CDS&#xD;&#xA;       , MD_ANALYSIS_I3&#xD;&#xA;       , MD_ANALYSIS_I60_CDS&#xD;&#xA;       , MD_ANALYSIS_I60&#xD;&#xA;       , MD_ANALYSIS_N1_CDS&#xD;&#xA;       , MD_ANALYSIS_N1&#xD;&#xA;       , MD_ANALYSIS_N2_CDS&#xD;&#xA;       , MD_ANALYSIS_N2&#xD;&#xA;       , MD_ANALYSIS_O15_CDS&#xD;&#xA;       , MD_ANALYSIS_O15&#xD;&#xA;       , MD_ANALYSIS_O2_CDS&#xD;&#xA;       , MD_ANALYSIS_O2&#xD;&#xA;       , MD_ANALYSIS_O4_CDS&#xD;&#xA;       , MD_ANALYSIS_O4&#xD;&#xA;       , MD_ANALYSIS_Q11822_1_CDS&#xD;&#xA;       , MD_ANALYSIS_Q11822_1&#xD;&#xA;       , MD_ANALYSIS_V2_CDS&#xD;&#xA;       , MD_ANALYSIS_V2&#xD;&#xA;       , MD_ANALYSIS_V60_CDS&#xD;&#xA;       , MD_ANALYSIS_V60&#xD;&#xA;       , MD_ANALYSIS_V7_CDS&#xD;&#xA;       , MD_ANALYSIS_V7&#xD;&#xA;       , MD_CAHPS_ACO_01C&#xD;&#xA;       , MD_CAHPS_ACO_01C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_02C&#xD;&#xA;       , MD_CAHPS_ACO_02C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_03C&#xD;&#xA;       , MD_CAHPS_ACO_03C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_04C&#xD;&#xA;       , MD_CAHPS_ACO_04C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_05C&#xD;&#xA;       , MD_CAHPS_ACO_05C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_06C&#xD;&#xA;       , MD_CAHPS_ACO_06C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_07C&#xD;&#xA;       , MD_CAHPS_ACO_07C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_08C&#xD;&#xA;       , MD_CAHPS_ACO_08C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_09C&#xD;&#xA;       , MD_CAHPS_ACO_09C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_12C&#xD;&#xA;       , MD_CAHPS_ACO_12C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_13C&#xD;&#xA;       , MD_CAHPS_ACO_13C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_14C&#xD;&#xA;       , MD_CAHPS_ACO_14C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_38C&#xD;&#xA;       , MD_CAHPS_ACO_38C_CDS&#xD;&#xA;       , MD_CAHPS_ACO_39C&#xD;&#xA;       , MD_CAHPS_ACO_39C_CDS&#xD;&#xA;       , MD_CAHPS_CG_1&#xD;&#xA;       , MD_CAHPS_CG_1_CDS&#xD;&#xA;       , MD_CAHPS_CG_2CL&#xD;&#xA;       , MD_CAHPS_CG_2CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_18CL&#xD;&#xA;       , MD_CAHPS_CG_18CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_19CL&#xD;&#xA;       , MD_CAHPS_CG_19CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_20CL&#xD;&#xA;       , MD_CAHPS_CG_20CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_21CL&#xD;&#xA;       , MD_CAHPS_CG_21CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_22CL&#xD;&#xA;       , MD_CAHPS_CG_22CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_23CL&#xD;&#xA;       , MD_CAHPS_CG_23CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_24CL&#xD;&#xA;       , MD_CAHPS_CG_24CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_25CL&#xD;&#xA;       , MD_CAHPS_CG_25CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_26CL&#xD;&#xA;       , MD_CAHPS_CG_26CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_27CL&#xD;&#xA;       , MD_CAHPS_CG_27CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_28CL&#xD;&#xA;       , MD_CAHPS_CG_28CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_29CL&#xD;&#xA;       , MD_CAHPS_CG_29CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_34CL&#xD;&#xA;       , MD_CAHPS_CG_34CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_35CL&#xD;&#xA;       , MD_CAHPS_CG_35CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_36ACL&#xD;&#xA;       , MD_CAHPS_CG_36ACL_CDS&#xD;&#xA;       , MD_CAHPS_CG_36BCL&#xD;&#xA;       , MD_CAHPS_CG_36BCL_CDS&#xD;&#xA;       , MD_CAHPS_CG_36CCL&#xD;&#xA;       , MD_CAHPS_CG_36CCL_CDS&#xD;&#xA;       , MD_CAHPS_CG_36DCL&#xD;&#xA;       , MD_CAHPS_CG_36DCL_CDS&#xD;&#xA;       , MD_CAHPS_CG_36ECL&#xD;&#xA;       , MD_CAHPS_CG_36ECL_CDS&#xD;&#xA;       , MD_CAHPS_CG_36FCL&#xD;&#xA;       , MD_CAHPS_CG_36FCL_CDS&#xD;&#xA;       , MD_CAHPS_CG_37CL&#xD;&#xA;       , MD_CAHPS_CG_37CL_CDS&#xD;&#xA;       , MD_CAHPS_CG_38A&#xD;&#xA;       , MD_CAHPS_CG_38A_CDS&#xD;&#xA;       , MD_CAHPS_CG_38B&#xD;&#xA;       , MD_CAHPS_CG_38B_CDS&#xD;&#xA;       , MD_CAHPS_CG_38C&#xD;&#xA;       , MD_CAHPS_CG_38C_CDS&#xD;&#xA;       , MD_CAHPS_CG_38D&#xD;&#xA;       , MD_CAHPS_CG_38D_CDS&#xD;&#xA;       , MD_CAHPS_CG_38E&#xD;&#xA;       , MD_CAHPS_CG_38E_CDS&#xD;&#xA;       , MD_CAHPS_CG_57CL&#xD;&#xA;       , MD_CAHPS_CG_57CL_CDS&#xD;&#xA;       , SURVEY_TYPE&#xD;&#xA;       , COMBINED_COMFORT_CDS&#xD;&#xA;       , COMBINED_COMFORT&#xD;&#xA;       , COMBINED_RATING_CDS&#xD;&#xA;       , COMBINED_RATING&#xD;&#xA;       , COMBINED_TEAMWORK_CDS&#xD;&#xA;       , COMBINED_TEAMWORK&#xD;&#xA;       , COMBINED_PRIVACY_CDS&#xD;&#xA;       , COMBINED_PRIVACY&#xD;&#xA;       , COMBINED_SENSITVITY_CDS&#xD;&#xA;       , COMBINED_SENSITVITY&#xD;&#xA;  FROM EDW_PRD.CUBESPRD.OUTPTNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientFact'
set @FriendlyName='OutpatientFact'
set @xml='SELECT ENCNT_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , APPT_TS_SK&#xD;&#xA;       , APPT_DT&#xD;&#xA;       , APPT_LNGTH&#xD;&#xA;       , CASE WHEN APPT_LNGTH=0 THEN 0 WHEN APPT_LNGTH&lt;0 THEN NULL ELSE LOG(APPT_LNGTH) END AS APPT_LNGTH_LOG&#xD;&#xA;       , APPT_CRTN_INSTNT_TS_SK&#xD;&#xA;       , APPT_CRTN_INSTNT_DT&#xD;&#xA;       , CHCK_IN_INSTNT_TS_SK&#xD;&#xA;       , CHCK_IN_INSTNT_DT&#xD;&#xA;       , CHCK_OUT_INSTNT_TS_SK&#xD;&#xA;       , CHCK_OUT_INSTNT_DT&#xD;&#xA;       , ARRVL_INSTNT_TS_SK&#xD;&#xA;       , ARRVL_INSTNT_DT&#xD;&#xA;       , SCNDS_WTNG&#xD;&#xA;       , CASE WHEN SCNDS_WTNG=0 THEN 0 WHEN SCNDS_WTNG&lt;0 THEN NULL ELSE LOG(SCNDS_WTNG) END AS SCNDS_WTNG_LOG&#xD;&#xA;       , DEPT_SK&#xD;&#xA;       , RM_INSTNT_TS_SK&#xD;&#xA;       , RM_INSTNT_DT&#xD;&#xA;       , SCDS_IN_RM&#xD;&#xA;       , CASE WHEN SCDS_IN_RM=0 THEN 0 WHEN SCDS_IN_RM&lt;0 THEN NULL ELSE LOG(SCDS_IN_RM) END AS SCDS_IN_RM_LOG&#xD;&#xA;       , BDY_MSS_IDX&#xD;&#xA;       , BDY_SRFC_AREA&#xD;&#xA;       , SYSTLC&#xD;&#xA;       , DISTLC&#xD;&#xA;       , TMP_IN_FHRNHT&#xD;&#xA;       , PULSE&#xD;&#xA;       , RSPRTNS&#xD;&#xA;       , PRMY_DIAG_SK&#xD;&#xA;       , PRMY_VST_PRVDR_KEY&#xD;&#xA;       , SCND_VST_PRVDR_KEY&#xD;&#xA;       , THRD_VST_PRVDR_KEY&#xD;&#xA;       , FRTH_VST_PRVDR_KEY&#xD;&#xA;       , AGE_YRS_AT_ENCNT&#xD;&#xA;       , CASE WHEN AGE_YRS_AT_ENCNT=0 THEN 0 WHEN AGE_YRS_AT_ENCNT&lt;0 THEN NULL ELSE LOG(AGE_YRS_AT_ENCNT) END AS AGE_YRS_AT_ENCNT_LOG&#xD;&#xA;       , AGE_MNTHS_AT_ENCNT&#xD;&#xA;       , AGE_DYS_AT_ENCNT&#xD;&#xA;&#xD;&#xA;  FROM CUBESPRD.OUTPTNT_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientAppointmentStatusDim'
set @FriendlyName='OutpatientAppointmentStatusDim'
set @xml='SELECT DISTINCT APPT_STTS_CDS&#xD;&#xA;       , APPT_STTS_NM&#xD;&#xA;FROM CUBESPRD.OUTPTNT_DIM WHERE APPT_STTS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientFinancialClassDim'
set @FriendlyName='OutpatientFinancialClassDim'
set @xml='SELECT DISTINCT VST_FNNCL_CLSS_CDS&#xD;&#xA;       , VST_FNNCL_CLSS_NM&#xD;&#xA;FROM CUBESPRD.OUTPTNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientAdmitConfirmationStatusDim'
set @FriendlyName='OutpatientAdmitConfStatrusDim'
set @xml='SELECT DISTINCT ADMT_CNF_STT_CDS&#xD;&#xA;       , ADMT_CNF_STT_NM&#xD;&#xA;FROM CUBESPRD.OUTPTNT_DIM WHERE ADMT_CNF_STT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientAppointmentConfirmation'
set @FriendlyName='OutpatientAppointmentConfirmationStatusDim'
set @xml='SELECT DISTINCT APPT_CNF_STT_CDS&#xD;&#xA;       , APPT_CNF_STT_NM&#xD;&#xA;FROM CUBESPRD.OUTPTNT_DIM WHERE APPT_CNF_STT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='OutpatientCancellationReasonDim'
set @FriendlyName='OutpatientCancellationReasonDim'
set @xml='SELECT DISTINCT CNCL_RSN_CDS&#xD;&#xA;       , CNCL_RSN_NM&#xD;&#xA;FROM CUBESPRD.OUTPTNT_DIM WHERE CNCL_RSN_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EDVisitDim'
set @FriendlyName='EDVisitDim'
set @xml='SELECT DISTINCT EDPTNT_VST_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , SRC_ENCNT_ID&#xD;&#xA;       , ED_DSPSTN_CDS&#xD;&#xA;       , VST_FNNCL_CLSS_CDS&#xD;&#xA;       , ACTY_LVL_CDS&#xD;&#xA;       , MEANS_ARRVL_CDS&#xD;&#xA;       , CASE WHEN PG_ER_SURVEY_ID IS NOT NULL THEN 'Yes' ELSE 'No' END AS PG_ER_SURVEYED&#xD;&#xA;       , ER_ANALYSIS_A2_CDS&#xD;&#xA;       , ER_ANALYSIS_A2&#xD;&#xA;       , ER_ANALYSIS_A28_CDS&#xD;&#xA;       , ER_ANALYSIS_A28&#xD;&#xA;       , ER_ANALYSIS_A3_CDS&#xD;&#xA;       , ER_ANALYSIS_A3&#xD;&#xA;       , ER_ANALYSIS_A4_CDS&#xD;&#xA;       , ER_ANALYSIS_A4&#xD;&#xA;       , ER_ANALYSIS_A5_CDS&#xD;&#xA;       , ER_ANALYSIS_A5&#xD;&#xA;       , ER_ANALYSIS_A86_CDS&#xD;&#xA;       , ER_ANALYSIS_A86&#xD;&#xA;       , ER_ANALYSIS_A87_CDS&#xD;&#xA;       , ER_ANALYSIS_A87&#xD;&#xA;       , ER_ANALYSIS_B1_CDS&#xD;&#xA;       , ER_ANALYSIS_B1&#xD;&#xA;       , ER_ANALYSIS_B3_CDS&#xD;&#xA;       , ER_ANALYSIS_B3&#xD;&#xA;       , ER_ANALYSIS_B4_CDS&#xD;&#xA;       , ER_ANALYSIS_B4&#xD;&#xA;       , ER_ANALYSIS_B5_CDS&#xD;&#xA;       , ER_ANALYSIS_B5&#xD;&#xA;       , ER_ANALYSIS_B76_CDS&#xD;&#xA;       , ER_ANALYSIS_B76&#xD;&#xA;       , ER_ANALYSIS_C1_CDS&#xD;&#xA;       , ER_ANALYSIS_C1&#xD;&#xA;       , ER_ANALYSIS_C2_CDS&#xD;&#xA;       , ER_ANALYSIS_C2&#xD;&#xA;       , ER_ANALYSIS_C4_CDS&#xD;&#xA;       , ER_ANALYSIS_C4&#xD;&#xA;       , ER_ANALYSIS_C5_CDS&#xD;&#xA;       , ER_ANALYSIS_C5&#xD;&#xA;       , ER_ANALYSIS_C7_CDS&#xD;&#xA;       , ER_ANALYSIS_C7&#xD;&#xA;       , ER_ANALYSIS_C75_CDS&#xD;&#xA;       , ER_ANALYSIS_C75&#xD;&#xA;       , ER_ANALYSIS_D2_CDS&#xD;&#xA;       , ER_ANALYSIS_D2&#xD;&#xA;       , ER_ANALYSIS_D3_CDS&#xD;&#xA;       , ER_ANALYSIS_D3&#xD;&#xA;       , ER_ANALYSIS_D4_CDS&#xD;&#xA;       , ER_ANALYSIS_D4&#xD;&#xA;       , ER_ANALYSIS_D52_CDS&#xD;&#xA;       , ER_ANALYSIS_D52&#xD;&#xA;       , ER_ANALYSIS_D65_CDS&#xD;&#xA;       , ER_ANALYSIS_D65&#xD;&#xA;       , ER_ANALYSIS_E1_CDS&#xD;&#xA;       , ER_ANALYSIS_E1&#xD;&#xA;       , ER_ANALYSIS_E2_CDS&#xD;&#xA;       , ER_ANALYSIS_E2&#xD;&#xA;       , ER_ANALYSIS_E3_CDS&#xD;&#xA;       , ER_ANALYSIS_E3&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP1&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP1_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP10&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP10_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP11&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP11_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP12&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP12_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP13&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP13_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP16&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP16_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP17&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP17_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP2&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP2_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP22&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP22_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP23&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP23_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP24&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP24_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP25&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP25_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP26&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP26_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP27&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP27_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP28&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP28_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP29&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP29_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP3&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP3_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP30&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP30_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP31&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP31_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP32&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP32_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP33&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP33_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP35&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP35_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP36&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP36_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP37&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP37_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP39&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP39_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP4&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP4_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP40&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP40_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP41&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP41_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP42&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP42_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP43&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP43_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP48&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP48_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP59&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP59_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP6&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP6_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP61&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP61_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP62_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP62&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP63_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP63&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP64_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP64&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP65_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP65&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP9_CDS&#xD;&#xA;       , ER_DEMOGRAPHICS_EDCP9&#xD;&#xA;       , ER_ANALYSIS_F1_CDS&#xD;&#xA;       , ER_ANALYSIS_F1&#xD;&#xA;       , ER_ANALYSIS_F2_CDS&#xD;&#xA;       , ER_ANALYSIS_F2&#xD;&#xA;       , ER_ANALYSIS_F4_CDS&#xD;&#xA;       , ER_ANALYSIS_F4&#xD;&#xA;       , ER_ANALYSIS_F41_CDS&#xD;&#xA;       , ER_ANALYSIS_F41&#xD;&#xA;       , ER_ANALYSIS_F68_CDS&#xD;&#xA;       , ER_ANALYSIS_F68&#xD;&#xA;       , ER_ANALYSIS_Q11822_1_CDS&#xD;&#xA;       , ER_ANALYSIS_Q11822_1&#xD;&#xA;--     , ER_DEMOGRAPHICS_DISTRIB&#xD;&#xA;--     , ER_DEMOGRAPHICS_DISTRIB_CDS&#xD;&#xA;       , CASE WHEN PG_PE_SURVEY_ID IS NOT NULL THEN 'Yes' ELSE 'No' END AS PG_PE_SURVEYED&#xD;&#xA;       , PE_ANALYSIS_A2_CDS&#xD;&#xA;       , PE_ANALYSIS_A2&#xD;&#xA;       , PE_ANALYSIS_A20_CDS&#xD;&#xA;       , PE_ANALYSIS_A20&#xD;&#xA;       , PE_ANALYSIS_A24_CDS&#xD;&#xA;       , PE_ANALYSIS_A24&#xD;&#xA;       , PE_ANALYSIS_A25_CDS&#xD;&#xA;       , PE_ANALYSIS_A25&#xD;&#xA;       , PE_ANALYSIS_A3_CDS&#xD;&#xA;       , PE_ANALYSIS_A3&#xD;&#xA;       , PE_ANALYSIS_A4_CDS&#xD;&#xA;       , PE_ANALYSIS_A4&#xD;&#xA;       , PE_ANALYSIS_A5_CDS&#xD;&#xA;       , PE_ANALYSIS_A5&#xD;&#xA;       , PE_ANALYSIS_A7_CDS&#xD;&#xA;       , PE_ANALYSIS_A7&#xD;&#xA;       , PE_ANALYSIS_B1_CDS&#xD;&#xA;       , PE_ANALYSIS_B1&#xD;&#xA;       , PE_ANALYSIS_B11_CDS&#xD;&#xA;       , PE_ANALYSIS_B11&#xD;&#xA;       , PE_ANALYSIS_B3_CDS&#xD;&#xA;       , PE_ANALYSIS_B3&#xD;&#xA;       , PE_ANALYSIS_B4_CDS&#xD;&#xA;       , PE_ANALYSIS_B4&#xD;&#xA;       , PE_ANALYSIS_B5_CDS&#xD;&#xA;       , PE_ANALYSIS_B5&#xD;&#xA;       , PE_ANALYSIS_C1_CDS&#xD;&#xA;       , PE_ANALYSIS_C1&#xD;&#xA;       , PE_ANALYSIS_C2_CDS&#xD;&#xA;       , PE_ANALYSIS_C2&#xD;&#xA;       , PE_ANALYSIS_C4_CDS&#xD;&#xA;       , PE_ANALYSIS_C4&#xD;&#xA;       , PE_ANALYSIS_C5_CDS&#xD;&#xA;       , PE_ANALYSIS_C5&#xD;&#xA;       , PE_ANALYSIS_C6_CDS&#xD;&#xA;       , PE_ANALYSIS_C6&#xD;&#xA;       , PE_ANALYSIS_C9_CDS&#xD;&#xA;       , PE_ANALYSIS_C9&#xD;&#xA;       , PE_ANALYSIS_D14_CDS&#xD;&#xA;       , PE_ANALYSIS_D14&#xD;&#xA;       , PE_ANALYSIS_D15_CDS&#xD;&#xA;       , PE_ANALYSIS_D15&#xD;&#xA;       , PE_ANALYSIS_D2_CDS&#xD;&#xA;       , PE_ANALYSIS_D2&#xD;&#xA;       , PE_ANALYSIS_D3_CDS&#xD;&#xA;       , PE_ANALYSIS_D3&#xD;&#xA;       , PE_ANALYSIS_D4_CDS&#xD;&#xA;       , PE_ANALYSIS_D4&#xD;&#xA;       , PE_ANALYSIS_F1_CDS&#xD;&#xA;       , PE_ANALYSIS_F1&#xD;&#xA;       , PE_ANALYSIS_F15_CDS&#xD;&#xA;       , PE_ANALYSIS_F15&#xD;&#xA;       , PE_ANALYSIS_F2_CDS&#xD;&#xA;       , PE_ANALYSIS_F2&#xD;&#xA;       , PE_ANALYSIS_F20_CDS&#xD;&#xA;       , PE_ANALYSIS_F20&#xD;&#xA;       , PE_ANALYSIS_F4_CDS&#xD;&#xA;       , PE_ANALYSIS_F4&#xD;&#xA;--     , PE_DEMOGRAPHICS_DISTRIB&#xD;&#xA;--     , PE_DEMOGRAPHICS_DISTRIB_CDS&#xD;&#xA;  FROM CUBESPRD.ED_VST_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EDVisitDispositionDim'
set @FriendlyName='EDVisitDispositionDim'
set @xml='SELECT DISTINCT&#xD;&#xA;ED_DSPSTN_CDS,&#xD;&#xA;ED_DSPSTN_DESC&#xD;&#xA;FROM CUBESPRD.ED_VST_DIM&#xD;&#xA;WHERE ED_DSPSTN_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EDVisitActivityLevelDim'
set @FriendlyName='EDVisitAcuityLevelDim'
set @xml='SELECT DISTINCT&#xD;&#xA;ACTY_LVL_CDS,&#xD;&#xA;CASE WHEN ACTY_LVL_DESC='IMMEDIATE' THEN '1 - IMMEDIATE' &#xD;&#xA;WHEN ACTY_LVL_DESC='EMERGENT' THEN '2 - EMERGENT' &#xD;&#xA;WHEN ACTY_LVL_DESC='URGENT' THEN '3 - URGENT' &#xD;&#xA;WHEN ACTY_LVL_DESC='LESS URGENT' THEN '4 - LESS URGENT' &#xD;&#xA;WHEN ACTY_LVL_DESC='NON-URGENT' THEN '5 - NON-URGENT' &#xD;&#xA;END AS ACTY_LVL_DESC&#xD;&#xA;FROM CUBESPRD.ED_VST_DIM&#xD;&#xA;WHERE ACTY_LVL_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EDVisitMeansOfArrivalDim'
set @FriendlyName='EDVisitMeansOfArrivalDim'
set @xml='SELECT DISTINCT &#xD;&#xA;MEANS_ARRVL_CDS,&#xD;&#xA;MEANS_ARRVL_DESC&#xD;&#xA;FROM CUBESPRD.ED_VST_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EDVisitFact'
set @FriendlyName='EDVisitFact'
set @xml='SELECT DISTINCT EDPTNT_VST_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , HSP_DSCRG_DT&#xD;&#xA;       , HSP_DSCRG_TS_SK&#xD;&#xA;       , ARRVL_DT&#xD;&#xA;       , ARRVL_TS_SK&#xD;&#xA;       , ED_DSCRG_DT&#xD;&#xA;       , ED_DSCRG_TS_SK&#xD;&#xA;       , DSPSTN_INSTNT_DT&#xD;&#xA;       , DSPSTN_INSTNT_TS_SK&#xD;&#xA;       , FRST_NONED_DEPT_ARRVL_DT&#xD;&#xA;       , FRST_NONED_DEPT_ARRVL_TS_SK&#xD;&#xA;       , AVS_PRNT_INSTNT_DT&#xD;&#xA;       , AVS_PRNT_INSTNT_TS_SK&#xD;&#xA;       , AGE_YRS_AT_ENCNT&#xD;&#xA;       , AGE_MNTHS_AT_ENCNT&#xD;&#xA;       , AGE_DYS_AT_ENCNT&#xD;&#xA;       , ADMT_DEPT_SK&#xD;&#xA;       , FRST_NON_ED_DEPT_SK&#xD;&#xA;       , PAT_RMD_DT&#xD;&#xA;       , PAT_RMD_TS_SK&#xD;&#xA;       , REG_CMPLTD_DT&#xD;&#xA;       , REG_CMPLTD_TS_SK&#xD;&#xA;       , TRGE_START_DT&#xD;&#xA;       , TRGE_START_TS_SK&#xD;&#xA;       , TRGE_CMPLTD_DT&#xD;&#xA;       , TRGE_CMPLTD_TS_SK&#xD;&#xA;       , FRST_ATTND_DT&#xD;&#xA;       , FRST_ATTND_TS_SK&#xD;&#xA;       , LAB_ORDRD_DT&#xD;&#xA;       , LAB_ORDRD_TS_SK&#xD;&#xA;       , LAB_CMPLTD_DT&#xD;&#xA;       , LAB_CMPLTD_TS_SK&#xD;&#xA;       , LAB_PRVDR_RVW_DT&#xD;&#xA;       , LAB_PRVDR_RVW_TS_SK&#xD;&#xA;       , IMG_ORDRD_DT&#xD;&#xA;       , IMG_ORDRD_TS_SK&#xD;&#xA;       , IMG_TST_CMPLTD_DT&#xD;&#xA;       , IMG_TST_CMPLTD_TS_SK&#xD;&#xA;       , IMG_PRVDR_RVW_DT&#xD;&#xA;       , IMG_PRVDR_RVW_TS_SK&#xD;&#xA;       , BED_RQST_DT&#xD;&#xA;       , BED_RQST_TS_SK&#xD;&#xA;       , CASE WHEN ARRV_TO_REG_CMPLTD &lt; 0 THEN NULL ELSE ARRV_TO_REG_CMPLTD END AS ARRV_TO_REG_CMPLTD&#xD;&#xA;&#x9;   , CASE WHEN ARRV_TO_REG_CMPLTD=0 THEN 0 WHEN ARRV_TO_REG_CMPLTD&lt;0 THEN NULL ELSE Log(ARRV_TO_REG_CMPLTD)END As ARRV_TO_REG_CMPLTD_Log&#xD;&#xA;       , CASE WHEN ARRV_TO_TRG_STRT &lt; 0 THEN NULL ELSE ARRV_TO_TRG_STRT END AS ARRV_TO_TRG_STRT&#xD;&#xA;       , CASE WHEN ARRV_TO_TRG_STRT=0 THEN 0 WHEN ARRV_TO_TRG_STRT&lt;0 THEN NULL ELSE Log(ARRV_TO_TRG_STRT)END As ARRV_TO_TRG_STRT_Log&#xD;&#xA;       , CASE WHEN TRG_STRT_TO_TRG_CMPLTD &lt; 0 THEN NULL ELSE TRG_STRT_TO_TRG_CMPLTD END AS TRG_STRT_TO_TRG_CMPLTD&#xD;&#xA;       , CASE WHEN TRG_STRT_TO_TRG_CMPLTD=0 THEN 0 WHEN TRG_STRT_TO_TRG_CMPLTD&lt;0 THEN NULL ELSE Log(TRG_STRT_TO_TRG_CMPLTD)END As TRG_STRT_TO_TRG_CMPLTD_Log&#xD;&#xA;       , CASE WHEN TRG_STRT_TO_PTNT_RMD &lt; 0 THEN NULL ELSE TRG_STRT_TO_PTNT_RMD END AS TRG_STRT_TO_PTNT_RMD&#xD;&#xA;       , CASE WHEN TRG_STRT_TO_PTNT_RMD=0 THEN 0 WHEN TRG_STRT_TO_PTNT_RMD&lt;0 THEN NULL ELSE Log(TRG_STRT_TO_PTNT_RMD)END As TRG_STRT_TO_PTNT_RMD_Log&#xD;&#xA;       , CASE WHEN BED_RQST_TO_PTNT_RMD &lt; 0 THEN NULL ELSE BED_RQST_TO_PTNT_RMD END AS BED_RQST_TO_PTNT_RMD&#xD;&#xA;       , CASE WHEN BED_RQST_TO_PTNT_RMD=0 THEN 0 WHEN BED_RQST_TO_PTNT_RMD&lt;0 THEN NULL ELSE Log(BED_RQST_TO_PTNT_RMD)END As BED_RQST_TO_PTNT_RMD_Log&#xD;&#xA;       , CASE WHEN TRG_CMPLTD_TO_PTNT_RMD &lt; 0 THEN NULL ELSE TRG_CMPLTD_TO_PTNT_RMD END AS TRG_CMPLTD_TO_PTNT_RMD&#xD;&#xA;       , CASE WHEN TRG_CMPLTD_TO_PTNT_RMD=0 THEN 0 WHEN TRG_CMPLTD_TO_PTNT_RMD&lt;0 THEN NULL ELSE Log(TRG_CMPLTD_TO_PTNT_RMD)END As TRG_CMPLTD_TO_PTNT_RMD_Log&#xD;&#xA;       , CASE WHEN TRG_CMPLTD_TO_ASSGN_ATTND &lt; 0 THEN NULL ELSE TRG_CMPLTD_TO_ASSGN_ATTND END AS TRG_CMPLTD_TO_ASSGN_ATTND&#xD;&#xA;       , CASE WHEN TRG_CMPLTD_TO_ASSGN_ATTND=0 THEN 0 WHEN TRG_CMPLTD_TO_ASSGN_ATTND&lt;0 THEN NULL ELSE Log(TRG_CMPLTD_TO_ASSGN_ATTND)END As TRG_CMPLTD_TO_ASSGN_ATTND_Log&#xD;&#xA;       , CASE WHEN PTNT_RMD_TO_ASSGN_ATTND &lt; 0 THEN NULL ELSE PTNT_RMD_TO_ASSGN_ATTND END AS PTNT_RMD_TO_ASSGN_ATTND&#xD;&#xA;       , CASE WHEN PTNT_RMD_TO_ASSGN_ATTND=0 THEN 0 WHEN PTNT_RMD_TO_ASSGN_ATTND&lt;0 THEN NULL ELSE Log(PTNT_RMD_TO_ASSGN_ATTND)END As PTNT_RMD_TO_ASSGN_ATTND_Log&#xD;&#xA;       , CASE WHEN ASSGN_ATTND_TO_DSPSTN &lt; 0 THEN NULL ELSE ASSGN_ATTND_TO_DSPSTN END AS ASSGN_ATTND_TO_DSPSTN&#xD;&#xA;       , CASE WHEN ASSGN_ATTND_TO_DSPSTN=0 THEN 0 WHEN ASSGN_ATTND_TO_DSPSTN&lt;0 THEN NULL ELSE Log(ASSGN_ATTND_TO_DSPSTN)END As ASSGN_ATTND_TO_DSPSTN_Log&#xD;&#xA;       , CASE WHEN DSPTN_TO_ED_DSCRG &lt; 0 THEN NULL ELSE DSPTN_TO_ED_DSCRG END AS DSPTN_TO_ED_DSCRG&#xD;&#xA;       , CASE WHEN DSPTN_TO_ED_DSCRG=0 THEN 0 WHEN DSPTN_TO_ED_DSCRG&lt;0 THEN NULL ELSE Log(DSPTN_TO_ED_DSCRG)END As DSPTN_TO_ED_DSCRG_Log&#xD;&#xA;       , CASE WHEN AVS_PRNTD_TO_ED_DSCRG &lt; 0 THEN NULL ELSE AVS_PRNTD_TO_ED_DSCRG END AS AVS_PRNTD_TO_ED_DSCRG&#xD;&#xA;       , CASE WHEN AVS_PRNTD_TO_ED_DSCRG=0 THEN 0 WHEN AVS_PRNTD_TO_ED_DSCRG&lt;0 THEN NULL ELSE Log(AVS_PRNTD_TO_ED_DSCRG)END As AVS_PRNTD_TO_ED_DSCRG_Log&#xD;&#xA;       , CASE WHEN ARRV_TO_LAB_ORDRD &lt; 0 THEN NULL ELSE ARRV_TO_LAB_ORDRD END AS ARRV_TO_LAB_ORDRD&#xD;&#xA;       , CASE WHEN ARRV_TO_LAB_ORDRD=0 THEN 0 WHEN ARRV_TO_LAB_ORDRD&lt;0 THEN NULL ELSE Log(ARRV_TO_LAB_ORDRD)END As ARRV_TO_LAB_ORDRD_Log&#xD;&#xA;       , CASE WHEN LAB_ORDRD_TO_CMPLTD &lt; 0 THEN NULL ELSE LAB_ORDRD_TO_CMPLTD END AS LAB_ORDRD_TO_CMPLTD&#xD;&#xA;       , CASE WHEN LAB_ORDRD_TO_CMPLTD=0 THEN 0 WHEN LAB_ORDRD_TO_CMPLTD&lt;0 THEN NULL ELSE Log(LAB_ORDRD_TO_CMPLTD)END As LAB_ORDRD_TO_CMPLTD_Log&#xD;&#xA;       , CASE WHEN LAB_CMPLTD_TO_PRVDR_RVW &lt; 0 THEN NULL ELSE LAB_CMPLTD_TO_PRVDR_RVW END AS LAB_CMPLTD_TO_PRVDR_RVW&#xD;&#xA;       , CASE WHEN LAB_CMPLTD_TO_PRVDR_RVW=0 THEN 0 WHEN LAB_CMPLTD_TO_PRVDR_RVW&lt;0 THEN NULL ELSE Log(LAB_CMPLTD_TO_PRVDR_RVW)END As LAB_CMPLTD_TO_PRVDR_RVW_Log&#xD;&#xA;       , CASE WHEN ARRV_TO_IMG_ORDRD &lt; 0 THEN NULL ELSE ARRV_TO_IMG_ORDRD END AS ARRV_TO_IMG_ORDRD&#xD;&#xA;       , CASE WHEN ARRV_TO_IMG_ORDRD=0 THEN 0 WHEN ARRV_TO_IMG_ORDRD&lt;0 THEN NULL ELSE Log(ARRV_TO_IMG_ORDRD)END As ARRV_TO_IMG_ORDRD_Log&#xD;&#xA;       , CASE WHEN IMG_TST_ORDRD_TO_CMPLTD &lt; 0 THEN NULL ELSE IMG_TST_ORDRD_TO_CMPLTD END AS IMG_TST_ORDRD_TO_CMPLTD&#xD;&#xA;       , CASE WHEN IMG_TST_ORDRD_TO_CMPLTD=0 THEN 0 WHEN IMG_TST_ORDRD_TO_CMPLTD&lt;0 THEN NULL ELSE Log(IMG_TST_ORDRD_TO_CMPLTD)END As IMG_TST_ORDRD_TO_CMPLTD_Log&#xD;&#xA;       , CASE WHEN IMG_TST_CMPLTD_TO_PRVDR_RVW &lt; 0 THEN NULL ELSE IMG_TST_CMPLTD_TO_PRVDR_RVW END AS IMG_TST_CMPLTD_TO_PRVDR_RVW&#xD;&#xA;       , CASE WHEN IMG_TST_CMPLTD_TO_PRVDR_RVW=0 THEN 0 WHEN IMG_TST_CMPLTD_TO_PRVDR_RVW&lt;0 THEN NULL ELSE Log(IMG_TST_CMPLTD_TO_PRVDR_RVW)END As IMG_TST_CMPLTD_TO_PRVDR_RVW_Log&#xD;&#xA;       , CASE WHEN ARRV_TO_ED_DSCRG &lt; 0 THEN NULL ELSE ARRV_TO_ED_DSCRG END AS ARRV_TO_ED_DSCRG&#xD;&#xA;       , CASE WHEN ARRV_TO_ED_DSCRG=0 THEN 0 WHEN ARRV_TO_ED_DSCRG&lt;0 THEN NULL ELSE Log(ARRV_TO_ED_DSCRG)END As ARRV_TO_ED_DSCRG_Log&#xD;&#xA;       , GLSGW_VAL&#xD;&#xA;       , CASE WHEN GLSGW_VAL=0 THEN 0 WHEN GLSGW_VAL&lt;0 THEN NULL ELSE Log(GLSGW_VAL)END As GLSGW_VAL_Log&#xD;&#xA;FROM CUBESPRD.ED_VST_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='dbo_DIAG_HYR_DIM'
set @FriendlyName='DiagnosisHierarchy'
set @xml='SELECT        DIAG_HIR_SK, DIAG_CLS_DESC, DIAG_PRN_SK&#xD;&#xA;FROM            DIAG_HIR_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='dbo_DIAG_BRIDGE'
set @FriendlyName='DiagnosisBridge'
set @xml='SELECT        DIAG_CD_SK, MSTR_DIAG_CD, DIAG_CD_DESC, ICD9_CD, ICD9_CD_LST, ICD10_CD, ICD10_CD_LST, DIAG_HIR_SK&#xD;&#xA;FROM            DIAG_CD_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LDW_DIAG_FACT'
set @FriendlyName='DiagnosisFact'
set @xml='SELECT        DIAG_SK, DF.SRC_TYPE,SRC_DIAG_SQNC, &#xD;&#xA;CASE &#xD;&#xA;WHEN DF.DIAG_CD_SK &lt; 0 THEN NULL ELSE DF.DIAG_CD_SK &#xD;&#xA;END AS DIAG_CD_SK, DF.PTNT_SK, ENCNT_SK, DEPT_SK, CHRNC_IND, PRMY_DIAG_IND, SCND_DIAG_IND, &#xD;&#xA;CASE &#xD;&#xA;WHEN (PRSNT_ON_ADMT_CD &lt; 0) &#xD;&#xA;OR (PRSNT_ON_ADMT_CD IN (1410783,3)) THEN NULL ELSE CAST (PRSNT_ON_ADMT_CD AS INTEGER) &#xD;&#xA;END AS PRSNT_ON_ADMT_CD, ED_DIAG_IND, &#xD;&#xA;CASE &#xD;&#xA;WHEN DIAG_STRT_DT &lt; '1900-01-02'::&quot;DATETIME&quot; THEN NULL ELSE DIAG_STRT_DT &#xD;&#xA;END AS DIAG_STRT_DT, DIAG_STRT_TS_SK, &#xD;&#xA;CASE &#xD;&#xA;WHEN DIAG_END_DT = '1000-01-02'::&quot;DATETIME&quot; OR DIAG_END_DT &gt; '2100-01-02'::&quot;DATETIME&quot; THEN NULL ELSE DIAG_END_DT &#xD;&#xA;END AS DIAG_END_DT, DIAG_END_TS_SK&#xD;&#xA;FROM CUBESPRD.DIAG_FACT DF INNER JOIN CUBESPRD.DIAG_CD_DIM DCD ON DF.DIAG_CD_SK=DCD.DIAG_CD_SK INNER JOIN CUBESDEV.PTNT_DIM PD ON df.PTNT_SK=pd.PTNT_SK'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DiagnosisPresentOnAdmit'
set @FriendlyName='DiagnosisPresentOnAdmitDim'
set @xml='SELECT    DISTINCT    CAST(PRSNT_ON_ADMT_CD AS INTEGER) AS PRSNT_ON_ADMT_CD, &#xD;&#xA;                          PRSNT_ON_ADMT_DESC&#xD;&#xA;FROM CUBESPRD.DIAG_FACT  WHERE PRSNT_ON_ADMT_CD&gt;0 AND PRSNT_ON_ADMT_CD&lt;&gt;1410783 AND PRSNT_ON_ADMT_DESC IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DRGDim'
set @FriendlyName='DRGDim'
set @xml='SELECT     dd.DRG_CD_SK,dd.SRC_DRG_ID, dd.DRG_NM, dd.DRG_TYPE_CD AS DRG_CLASS, dd.TRNL_DRG_CD, CASE WHEN MDC_CD IS NULL &#xD;&#xA;                  THEN - 1 ELSE MDC_CD END AS MDC_CD, CASE WHEN MDC_NM IS NULL THEN 'Not Applicable' ELSE MDC_NM END AS MDC_NM, sl.SVL_CD, sl.MSDRG_SVL&#xD;&#xA;FROM        { oj CUBESPRD.DRG_CD_DIM dd LEFT OUTER JOIN&#xD;&#xA;                  DW.V_MSDRG_SERVICE_LINE sl ON dd.TRNL_DRG_CD = sl.DRG }'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DRGFact'
set @FriendlyName='DRGFact'
set @xml='SELECT ENCNT_DRG_SK&#xD;&#xA;       , PRTY_SQNC&#xD;&#xA;       , DRG_CD_SK&#xD;&#xA;       , DRG_TYPE_CD&#xD;&#xA;       , ACCT_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , ENCNT_DT&#xD;&#xA;  FROM CUBESPRD.DRG_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DRGTypeDim'
set @FriendlyName='DRGTypeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;        DRG_TYPE_CD&#xD;&#xA;       , DRG_TYPE_DSPLY_NM&#xD;&#xA;  FROM CUBESPRD.DRG_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DRGSeqDim'
set @FriendlyName='DRGSeqDim'
set @xml='SELECT DISTINCT PRTY_SQNC&#xD;&#xA;      &#xD;&#xA;  FROM CUBESPRD.DRG_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='BinaryDim'
set @FriendlyName='BinaryDim'
set @xml='SELECT        *&#xD;&#xA;FROM            (VALUES (0, 'No'), (1, 'Yes'), (-1, 'Not Applicable')) AS Colors(Binary_CD, Binary_Desc)'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='DiagnosisSourceDim'
set @FriendlyName='DiagnosisSourceDim'
set @xml='SELECT DISTINCT&#xD;&#xA;        SRC_TYPE&#xD;&#xA;       , SRC_TYPE_DSPLY_NM&#xD;&#xA; FROM CUBESPRD.DIAG_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureDim'
set @FriendlyName='ProcedureDim'
set @xml='SELECT  PRCDR_CD_SK  &#xD;&#xA;       ,PRCDR_CD_DESCR ||' - ' ||MSTR_PRCDR_CD AS PRCDR_NM&#xD;&#xA;       , SRC_PRCDR_CD_ID&#xD;&#xA;       , PRCDR_CD&#xD;&#xA;       , CASE WHEN /* CD_TYPE &lt; 0 OR */ CD_TYPE = 'NO_MATCH' OR &#xD;&#xA;CD_TYPE = 'UNKNOWN' THEN NULL ELSE CAST(CD_TYPE AS INT) END AS CD_TYPE,CD_TYPE_NM&#xD;&#xA;       , CASE WHEN /* PRCDR_CGY_ID &lt; 0 OR */ PRCDR_CGY_ID = 'NO_MATCH' OR &#xD;&#xA;PRCDR_CGY_ID = 'UNKNOWN' THEN NULL ELSE CAST(PRCDR_CGY_ID AS INT) END AS PRCDR_CGY_ID&#xD;&#xA;       , REV_CD&#xD;&#xA;  FROM CUBESPRD.PRCDR_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureCategoryDim'
set @FriendlyName='ProcedureCategoryDim'
set @xml='SELECT DISTINCT&#xD;&#xA;         CASE WHEN PRCDR_CGY_ID &lt; 0 THEN NULL ELSE CAST(PRCDR_CGY_ID AS INT) END AS PRCDR_CGY_ID&#xD;&#xA;       , CASE WHEN PRCDR_CGY_ID=10 THEN 'DIAGNOSTIC IMAGING ORDERABLES' WHEN PRCDR_CGY_ID=20 THEN 'FLUOROSCOPY ORDERABLES' ELSE PRCDR_CGY_NM END AS PRCDR_CGY_NM&#xD;&#xA;FROM CUBESPRD.PRCDR_DIM WHERE PRCDR_CGY_ID IS NOT NULL AND PRCDR_CGY_ID != 'NO_MATCH' AND &#xD;&#xA;PRCDR_CGY_ID != 'UNKNOWN''
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureTypeDim'
set @FriendlyName='ProcedureTypeDim'
set @xml='SELECT DISTINCT CAST (CD_TYPE AS INT) AS CD_TYPE&#xD;&#xA;       &#x9;, CD_TYPE_NM&#xD;&#xA;FROM CUBESPRD.PRCDR_DIM WHERE CD_TYPE IS NOT NULL AND CD_TYPE != 'NO_MATCH' AND &#xD;&#xA;CD_TYPE != 'UNKNOWN''
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureRevenueCodeDim'
set @FriendlyName='ProcedureRevenueCodeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;           REV_CD&#xD;&#xA;&#x9;, REV_CD_NM&#xD;&#xA;FROM CUBESPRD.PRCDR_DIM WHERE REV_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderFact'
set @FriendlyName='ProcedureOrderFact'
set @xml='SELECT   PRCDR_ORDR_FACT_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , PRCDR_CD_SK&#xD;&#xA;       , ORDRD_BY_USR_SK&#xD;&#xA;       , ORDRD_BY_PROVDR_SK&#xD;&#xA;       , AUTH_BY_PROVDR_SK&#xD;&#xA;       , ORDRD_DT&#xD;&#xA;       , ORDRD_TS_SK&#xD;&#xA;       , ORDR_TYP_CD&#xD;&#xA;       , ORDR_CLSS_CD&#xD;&#xA;       , ORDR_MODE_CD&#xD;&#xA;       , ORDR_SRC_CD&#xD;&#xA;       , ORDR_STS_CD&#xD;&#xA;       , ORDR_PRTY_CD&#xD;&#xA;       , STNDNG_STS_CD&#xD;&#xA;       , ORDR_SET_CD&#xD;&#xA;       , CPOE_IND&#xD;&#xA;       , REQR_COSIG_IND&#xD;&#xA;       , COSIG_IND&#xD;&#xA;       , VRBL_SGN_IND&#xD;&#xA;  FROM CUBESPRD.PRCDR_ORDR_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderPriorityDim'
set @FriendlyName='ProcedureOrderPriorityDim'
set @xml='SELECT DISTINCT&#xD;&#xA;ORDR_PRTY_CD,&#xD;&#xA;ORDR_PRTY_NM&#xD;&#xA;FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_PRTY_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderStatusDim'
set @FriendlyName='ProcedureOrderStatusDim'
set @xml='SELECT DISTINCT&#xD;&#xA;  ORDR_STS_CD,&#xD;&#xA;  ORDR_STS_NM&#xD;&#xA;    FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_STS_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderSourceDim'
set @FriendlyName='ProcedureOrderSourceDim'
set @xml='SELECT DISTINCT&#xD;&#xA;  ORDR_SRC_CD,&#xD;&#xA;  ORDR_SRC_NM&#xD;&#xA;    FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_SRC_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderModeDim'
set @FriendlyName='ProcedureOrderModeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;  ORDR_MODE_CD,&#xD;&#xA;  ORDR_MODE_NM&#xD;&#xA;    FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_MODE_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderClassDim'
set @FriendlyName='ProcedureOrderClassDim'
set @xml='SELECT DISTINCT&#xD;&#xA;  ORDR_CLSS_CD,&#xD;&#xA;  ORDR_CLSS_NM&#xD;&#xA;    FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_CLSS_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderTypeDim'
set @FriendlyName='ProcedureOrderTypeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;  ORDR_TYP_CD,&#xD;&#xA;  ORDR_TYP_NM&#xD;&#xA;    FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_TYP_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderStandingStatusDim'
set @FriendlyName='ProcedureOrderStandingStatusDim'
set @xml='SELECT DISTINCT&#xD;&#xA; STNDNG_STS_CD,&#xD;&#xA;STNDNG_STS_NM&#xD;&#xA;FROM CUBESPRD.PRCDR_ORDR_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProcedureOrderSetDm'
set @FriendlyName='ProcedureOrderSetDm'
set @xml='SELECT DISTINCT&#xD;&#xA;ORDR_SET_CD,&#xD;&#xA;ORDR_SET_NM&#xD;&#xA;FROM CUBESPRD.PRCDR_ORDR_FACT WHERE ORDR_SET_CD IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EDVisitFinancialClass'
set @FriendlyName='EDVisitFinancialClass'
set @xml='SELECT DISTINCT&#xD;&#xA;VST_FNNCL_CLSS_CDS,&#xD;&#xA;VST_FNNCL_CLSS_DESC&#xD;&#xA;FROM CUBESPRD.ED_VST_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationDim'
set @FriendlyName='MedicationDim'
set @xml='SELECT MDCTN_SK&#xD;&#xA;       , SRC_MDCTN_ID&#xD;&#xA;       , MDCTN_NM&#xD;&#xA;       , GNRC_NM&#xD;&#xA;       , THRPC_CLASS_CDS&#xD;&#xA;       , PHARM_CLASS_CDS&#xD;&#xA;       , PHARM_SUBCLS_CDS&#xD;&#xA;       , MDCTN_FORM_CDS&#xD;&#xA;       , ADMN_RT_CDS&#xD;&#xA;       , MDCTN_STRG&#xD;&#xA;       , GPI_NUM&#xD;&#xA;       , DEA_CLASS_CDS&#xD;&#xA;       , CASE WHEN CNTLD_SUBSTN_IND = 0 OR CNTLD_SUBSTN_IND IS NULL THEN 'NO' &#xD;&#xA;&#x9;      WHEN CNTLD_SUBSTN_IND = 1 THEN 'YES' &#xD;&#xA;&#x9;      END AS CNTLD_SUBSTN_IND&#xD;&#xA;  FROM CUBESPRD.MDCTN_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='CensusMeasureTypeDim'
set @FriendlyName='CensusMeasureTypeDim'
set @xml='SELECT DISTINCT &#xD;&#xA;                         MSR_TYPE_AB AS MSR_TYPE_SK, CASE WHEN STRLEFT(SRC_MSR_TYPE_NM, 1) = '&quot;' THEN SUBSTR(SRC_MSR_TYPE_NM, 2, LENGTH(SRC_MSR_TYPE_NM) - 3) &#xD;&#xA;                         ELSE SRC_MSR_TYPE_NM END AS SRC_MSR_TYPE_NM&#xD;&#xA;FROM            (SELECT        MIN(DW.CENSUS_MSR_TYPE_DIM.MSR_TYPE_SK) AS MSR_TYPE_AB, DW.CENSUS_MSR_TYPE_DIM.SRC_MSR_TYPE_NM, DW.CENSUS_SRC_DIM.SRC_NM&#xD;&#xA;                          FROM            DW.CENSUS_MSR_FACT CENSUS_MSR_FACT_2, DW.CENSUS_MSR_TYPE_DIM, DW.CENSUS_SRC_DIM&#xD;&#xA;                          WHERE        CENSUS_MSR_FACT_2.MSR_TYPE_SK = DW.CENSUS_MSR_TYPE_DIM.MSR_TYPE_SK AND CENSUS_MSR_FACT_2.SRC_SK = DW.CENSUS_SRC_DIM.SRC_SK&#xD;&#xA;                          GROUP BY DW.CENSUS_MSR_TYPE_DIM.SRC_MSR_TYPE_NM, DW.CENSUS_SRC_DIM.SRC_NM) AB'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='CensusSourceDim'
set @FriendlyName='CensusSourceDim'
set @xml='SELECT     SRC_SK, SRC_DESC, SRC_YR, &#xD;&#xA;                  CASE WHEN SRC_ESTMTE_IN_YRS = '1YR' THEN 'ACS 1-Year' WHEN SRC_ESTMTE_IN_YRS = '3YR' THEN 'ACS 3-Year' WHEN SRC_ESTMTE_IN_YRS = '5YR' THEN 'ACS 5-Year' WHEN SRC_ESTMTE_IN_YRS = 'SF1' THEN 'Decennial Census' END AS SRC_ESTMTE_IN_YRS&#xD;&#xA;FROM        DW.CENSUS_SRC_DIM&#xD;&#xA;WHERE     (IS_CRNT = 1)'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='CensusGeographicalAreaDim'
set @FriendlyName='CensusGeographicalAreaDim'
set @xml='SELECT        GEO_AREA_SK, GEO_AREA_TYPE, GEO_AREA_DSPL_NM&#xD;&#xA;FROM            DW.GEO_AREA_DIM&#xD;&#xA;WHERE        (IS_CRNT = 1) AND (STRLEFT(SRC_GEO_AREA_ID, 2) IN ('11', '21', '37', '47', '51', '54'))'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='CensusMeasureFact'
set @FriendlyName='CensusMeasureFact'
set @xml='SELECT        DW.CENSUS_MSR_FACT.MSR_FACT_SK, DW.CENSUS_MSR_FACT.GEO_AREA_SK, DW.CENSUS_MSR_FACT.SRC_SK, DW.CENSUS_MSR_FACT.MSR_FLT_VAL, DW.CENSUS_MSR_FACT.MSR_VAL_SYM, &#xD;&#xA;                         CASE WHEN DW.CENSUS_MSR_FACT.MSR_FLT_VAL = 0 THEN 0 WHEN DW.CENSUS_MSR_FACT.MSR_FLT_VAL &lt; 0 THEN NULL ELSE Log(DW.CENSUS_MSR_FACT.MSR_FLT_VAL) END AS MSR_FLT_VAL_Log,&#xD;&#xA;                          Abstract.MSR_TYPE_AB AS MSR_TYPE_SK&#xD;&#xA;FROM            DW.CENSUS_MSR_FACT, DW.GEO_AREA_DIM,&#xD;&#xA;                             (SELECT DISTINCT AB.MSR_TYPE_AB, Comoplete.MSR_TYPE_FULL&#xD;&#xA;                               FROM            (SELECT        MIN(DW.CENSUS_MSR_TYPE_DIM.MSR_TYPE_SK) AS MSR_TYPE_AB, DW.CENSUS_MSR_TYPE_DIM.SRC_MSR_TYPE_NM, DW.CENSUS_SRC_DIM.SRC_NM&#xD;&#xA;                                                         FROM            DW.CENSUS_MSR_FACT CENSUS_MSR_FACT_2, DW.CENSUS_MSR_TYPE_DIM, DW.CENSUS_SRC_DIM&#xD;&#xA;                                                         WHERE        CENSUS_MSR_FACT_2.MSR_TYPE_SK = DW.CENSUS_MSR_TYPE_DIM.MSR_TYPE_SK AND CENSUS_MSR_FACT_2.SRC_SK = DW.CENSUS_SRC_DIM.SRC_SK&#xD;&#xA;                                                         GROUP BY DW.CENSUS_MSR_TYPE_DIM.SRC_MSR_TYPE_NM, DW.CENSUS_SRC_DIM.SRC_NM) AB,&#xD;&#xA;                                                             (SELECT        CENSUS_MSR_TYPE_DIM_1.MSR_TYPE_SK AS MSR_TYPE_FULL, CENSUS_MSR_TYPE_DIM_1.SRC_MSR_TYPE_NM, CENSUS_SRC_DIM_1.SRC_NM&#xD;&#xA;                                                               FROM            DW.CENSUS_MSR_FACT CENSUS_MSR_FACT_1, DW.CENSUS_MSR_TYPE_DIM CENSUS_MSR_TYPE_DIM_1, DW.CENSUS_SRC_DIM CENSUS_SRC_DIM_1&#xD;&#xA;                                                               WHERE        CENSUS_MSR_FACT_1.MSR_TYPE_SK = CENSUS_MSR_TYPE_DIM_1.MSR_TYPE_SK AND CENSUS_MSR_FACT_1.SRC_SK = CENSUS_SRC_DIM_1.SRC_SK) Comoplete&#xD;&#xA;                               WHERE        AB.SRC_MSR_TYPE_NM = Comoplete.SRC_MSR_TYPE_NM AND AB.SRC_NM = Comoplete.SRC_NM) Abstract&#xD;&#xA;WHERE        DW.CENSUS_MSR_FACT.GEO_AREA_SK = DW.GEO_AREA_DIM.GEO_AREA_SK AND DW.CENSUS_MSR_FACT.MSR_TYPE_SK = Abstract.MSR_TYPE_FULL AND (DW.CENSUS_MSR_FACT.IS_CRNT = 1) AND &#xD;&#xA;                         (STRLEFT(DW.GEO_AREA_DIM.SRC_GEO_AREA_ID, 2) IN ('11', '21', '37', '47', '51', '54'))'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationAdministrationRouteDim'
set @FriendlyName='MedicationAdministrationRouteDim'
set @xml='SELECT DISTINCT ADMN_RT_CDS&#xD;&#xA;       , ADMN_RT_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_DIM WHERE ADMN_RT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationDEAClassDim'
set @FriendlyName='MedicationDEAClassDim'
set @xml='SELECT DISTINCT DEA_CLASS_CDS&#xD;&#xA;      , DEA_CLASS_DESC&#xD;&#xA;FROM  CUBESPRD.MDCTN_DIM WHERE DEA_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationFormDim'
set @FriendlyName='MedicationFormDim'
set @xml='SELECT DISTINCT MDCTN_FORM_CDS&#xD;&#xA;       , MDCTN_FORM_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_DIM WHERE MDCTN_FORM_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationPharmacologicalClassDim'
set @FriendlyName='MedicationPharmacologicalClassDim'
set @xml='SELECT DISTINCT PHARM_CLASS_CDS&#xD;&#xA;       , CASE WHEN PHARM_CLASS_CDS=256 THEN 'MIOTICS AND OTHER INTRAOCULAR PRESSURE REDUCERS' ELSE PHARM_CLASS_DESC END AS PHARM_CLASS_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_DIM WHERE PHARM_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationTherapeuticClassDim'
set @FriendlyName='MedicationTherapeuticClassDim'
set @xml='SELECT DISTINCT THRPC_CLASS_CDS,&#xD;&#xA;THRPC_CLASS_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_DIM WHERE THRPC_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationPharmacologicalSubclassDim'
set @FriendlyName='MedicationPharmacologicalSubclassDim'
set @xml='SELECT DISTINCT PHARM_SUBCLS_CDS&#xD;&#xA;       , CASE WHEN PHARM_SUBCLS_DESC='ANTINEOPLASTIC - ANTIBODY-DRUG CONJUGATES (ADCS)' THEN 'ANTINEOPLASTIC - ANTIBODY-DRUG COMPLEXES' ELSE PHARM_SUBCLS_DESC END AS PHARM_SUBCLS_DESC&#xD;&#xA; FROM CUBESPRD.MDCTN_DIM WHERE PHARM_SUBCLS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderDim'
set @FriendlyName='MedicationOrderDim'
set @xml='SELECT   MD.MDCTN_ORDR_SK&#xD;&#xA;&#x9;, SRC_ORDR_ID&#xD;&#xA;&#x9;, PTNT_INSTR&#xD;&#xA;       , FREQ_DESC&#xD;&#xA;       , RT_CDS&#xD;&#xA;       , QTY_UNT_CDS&#xD;&#xA;       , DOSE_UNT_CDS&#xD;&#xA;       , CLCLTD_DOSE_UNT_CDS&#xD;&#xA;       , ORDR_SRC_CDS&#xD;&#xA;       , ORDR_CLASS_CDS&#xD;&#xA;       , ORDR_MODE_CDS&#xD;&#xA;       , ORDR_PRTY_CDS&#xD;&#xA;       , ORDR_SET_SRC_CDS&#xD;&#xA;       , PRN_RSN_1&#xD;&#xA;       , INDC_FOR_USE_1&#xD;&#xA;&#x9;, CASE WHEN CPOE_IND = 0 THEN 'No' WHEN CPOE_IND = 1 THEN 'Yes' ELSE NULL END AS CPOE_IND&#xD;&#xA;&#x9;, CASE WHEN DSPNS_AS_WRTN_IND = 0 THEN 'No' WHEN DSPNS_AS_WRTN_IND = 1 THEN 'Yes' ELSE NULL END AS DSPNS_AS_WRTN_IND&#xD;&#xA;&#x9;, CASE WHEN ORDRD_AS_NONFORM_IND = 0 THEN 'No' WHEN ORDRD_AS_NONFORM_IND = 1 THEN 'Yes' ELSE NULL END AS ORDRD_AS_NONFORM_IND&#xD;&#xA;&#x9;, CASE WHEN VRFD_AS_NONFORM_IND = 0 THEN 'No' WHEN VRFD_AS_NONFORM_IND = 1 THEN 'Yes' ELSE NULL END AS VRFD_AS_NONFORM_IND&#xD;&#xA;&#x9;, CASE WHEN AUTOMAT_VRFD_IND = 0 THEN 'No' WHEN AUTOMAT_VRFD_IND = 1 THEN 'Yes' ELSE NULL END AS AUTOMAT_VRFD_IND&#xD;&#xA;&#x9;, CASE WHEN VRBL_IND = 0 THEN 'No' WHEN VRBL_IND = 1 THEN 'Yes' ELSE NULL END AS VRBL_IND&#xD;&#xA;&#x9;, CASE WHEN REQR_COSIG_IND = 0 THEN 'No' WHEN REQR_COSIG_IND = 1 THEN 'Yes' ELSE NULL END AS REQR_COSIG_IND&#xD;&#xA;&#x9;, CASE WHEN COSIG_IND = 0 THEN 'No' WHEN COSIG_IND = 1 THEN 'Yes' ELSE NULL END AS COSIG_IND&#xD;&#xA;&#x9;, CASE WHEN VRBL_SGN_IND = 0 THEN 'No' WHEN VRBL_SGN_IND = 1 THEN 'Yes' ELSE NULL END AS VRBL_SGN_IND&#xD;&#xA;  FROM CUBESPRD.MDCTN_ORDR_DIM MD&#xD;&#xA;  INNER JOIN CUBESPRD.MDCTN_ORDR_FACT MF ON MD.MDCTN_ORDR_SK = MF.MDCTN_ORDR_SK&#xD;&#xA;  INNER JOIN CUBESPRD.ENCNT_DIM ED ON MF.ENCNT_SK = ED.ENCNT_SK'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderModeDim'
set @FriendlyName='MedicationOrderModeDim'
set @xml='SELECT DISTINCT ORDR_MODE_CDS&#xD;&#xA;       , ORDR_MODE_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE ORDR_MODE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderDoseUnitDim'
set @FriendlyName='MedicationOrderDoseUnitDim'
set @xml='SELECT DISTINCT DOSE_UNT_CDS,&#xD;&#xA;CASE WHEN DOSE_UNT_CDS=10004 THEN 'CARTRIDGE' ELSE DOSE_UNT_DESC END AS DOSE_UNT_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE DOSE_UNT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderCalculatedDoseUnitDim'
set @FriendlyName='MedicationOrderCalculatedDoseUnitDim'
set @xml='SELECT DISTINCT &#xD;&#xA;  CLCLTD_DOSE_UNT_CDS, &#xD;&#xA;  CLCLTD_DOSE_UNT_DESC&#xD;&#xA;  FROM CUBESPRD.MDCTN_ORDR_DIM WHERE CLCLTD_DOSE_UNT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderClassDim'
set @FriendlyName='MedicationOrderClassDim'
set @xml='SELECT DISTINCT ORDR_CLASS_CDS&#xD;&#xA;,ORDR_CLASS_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE ORDR_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderFrequencyDim'
set @FriendlyName='MedicationOrderFrequencyDim'
set @xml='SELECT DISTINCT FREQ_CDS&#xD;&#xA;       , FREQ_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE FREQ_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderPriorityDim'
set @FriendlyName='MedicationOrderPriorityDim'
set @xml='SELECT DISTINCT ORDR_PRTY_CDS&#xD;&#xA;       , ORDR_PRTY_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE ORDR_PRTY_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderQuantityUnitDim'
set @FriendlyName='MedicationOrderQuantityUnitDim'
set @xml='SELECT DISTINCT QTY_UNT_CDS,&#xD;&#xA;CASE WHEN QTY_UNT_CDS=10004 THEN 'CARTRIDGE' ELSE QTY_UNT_DESC END AS QTY_UNT_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE QTY_UNT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderRouteDim'
set @FriendlyName='MedicationOrderRouteDim'
set @xml='SELECT DISTINCT RT_CDS&#xD;&#xA;       , RT_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE RT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderSetSourceDim'
set @FriendlyName='MedicationOrderSetSourceDim'
set @xml='SELECT DISTINCT ORDR_SET_SRC_CDS, &#xD;&#xA;CASE &#xD;&#xA;WHEN ORDR_SET_SRC_NM='IP-SUR:ORTHO: TOTAL HIP REPLACEMENT: POSTOP (PHASE OF CARE)' THEN 'IP-SUR:ORTHO: TOTAL HIP REPLACEMENT (PHASES OF CARE)' &#xD;&#xA;WHEN ORDR_SET_SRC_NM='IP-ID:GI FECAL MICROBIOTA TRANSPLANTATION (COLONOSCOPY)' THEN 'IP-ID:GI FECAL MICROBIOTA TRANSPLANTATION' &#xD;&#xA;WHEN ORDR_SET_SRC_NM='IP-CAR:PRO:ABLATION FOR ATRIAL FIBRILLATION  (CRMH ONLY)' THEN 'IP-CAR:PRO:ABLATION  (CRMH ONLY)' &#xD;&#xA;WHEN ORDR_SET_SRC_NM='IP-SUR:ORTHO: TOTAL KNEE: PREOP (PHASE OF CARE)' THEN 'IP-SUR:ORTHO: TOTAL KNEE'&#xD;&#xA;WHEN ORDR_SET_SRC_NM='IP-PED: PARENTERAL NUTRITION (PN) AND METABOLIC MONITORING'THEN 'IP-PED: PARENTERAL NUTRITION (PPN/TPN) AND METABOLIC MONITORING'&#xD;&#xA;ELSE ORDR_SET_SRC_NM &#xD;&#xA;END AS ORDR_SET_SRC_NM&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM&#xD;&#xA;WHERE ORDR_SET_SRC_CDS &#xD;&#xA;IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderSourceDim'
set @FriendlyName='MedicationOrderSourceDim'
set @xml='SELECT DISTINCT ORDR_SRC_CDS&#xD;&#xA;       , ORDR_SRC_DESC&#xD;&#xA;FROM CUBESPRD.MDCTN_ORDR_DIM WHERE ORDR_SRC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationOrderFact'
set @FriendlyName='MedicationOrderFact'
set @xml='SELECT &#x9; MDCTN_ORDR_FACT_SK&#xD;&#xA;       , CASE WHEN MDCTN_ORDR_SK &lt; 0 THEN NULL ELSE MDCTN_ORDR_SK END AS MDCTN_ORDR_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , DEPT_SK&#xD;&#xA;       , PHRM_SK&#xD;&#xA;       , MDCTN_SK&#xD;&#xA;       , ORDRD_BY_USR_SK&#xD;&#xA;       , ORDRD_BY_PROVDR_SK&#xD;&#xA;       , AUTH_BY_PROVDR_SK&#xD;&#xA;       , ORDRD_DT&#xD;&#xA;       , ORDRD_TS_SK&#xD;&#xA;       , ORDR_STRT_DT&#xD;&#xA;       , ORDR_STRT_TS_SK&#xD;&#xA;       , ORDR_END_DT&#xD;&#xA;       , ORDR_END_TS_SK&#xD;&#xA;       , ORDR_DSCNTND_DT&#xD;&#xA;       , DSCNTND_TS_SK&#xD;&#xA;       , QTY&#xD;&#xA;       , MIN_DOSE&#xD;&#xA;       , MAXM_DOSE&#xD;&#xA;       , CLCLTD_MIN_DOSE&#xD;&#xA;       , CLCLTD_MAXM_DOSE&#xD;&#xA;       , NBR_OF_DOSES&#xD;&#xA;       , NBR_WRTN_REFILLS&#xD;&#xA;  FROM CUBESPRD.MDCTN_ORDR_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='PharmacyDim'
set @FriendlyName='PharmacyDim'
set @xml='SELECT PHRM_SK&#xD;&#xA;       , SRC_PHRM_ID&#xD;&#xA;       , PHRM_NM&#xD;&#xA;       , SYS_TYPE_DESC&#xD;&#xA;       , CASE WHEN PHY_TYPE_CDS &lt; 0 THEN NULL ELSE PHY_TYPE_CDS END AS PHY_TYPE_CDS&#xD;&#xA;       , NPI_NUM&#xD;&#xA;       , DEA_NUM&#xD;&#xA;       , NCPDP_NUM&#xD;&#xA;       , CASE WHEN FCLT_SPRT_IND = 0 THEN 'No' WHEN FCLT_SPRT_IND = 1 THEN 'Yes' ELSE NULL END AS FCLT_SPRT_IND&#xD;&#xA;&#x9;, CASE WHEN RX_SUP_IND = 0 THEN 'No' WHEN RX_SUP_IND = 1 THEN 'Yes' ELSE NULL END AS RX_SUP_IND&#xD;&#xA;FROM EDW_PRD.CUBESPRD.PHRM_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='PharmacyPhysicalTypeDim'
set @FriendlyName='PharmacyPhysicalTypeDim'
set @xml='Select DISTINCT PHY_TYPE_CDS&#xD;&#xA;       , PHY_TYPE_DESC from CUBESPRD.PHRM_DIM WHERE PHY_TYPE_CDS &gt; 0'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationAdministrationFact'
set @FriendlyName='MedicationAdministrationFact'
set @xml='SELECT MDCTN_ADMN_FACT_SK&#xD;&#xA;       , ma.MDCTN_ORDR_SK &#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , ENCNT_SK&#xD;&#xA;       , ADMN_DEPT_SK&#xD;&#xA;       , ADMN_USR_SK&#xD;&#xA;       , PRMY_CMPNT_SK&#xD;&#xA;       , SCND_CMPNT_SK&#xD;&#xA;       , THRD_CMPNT_SK&#xD;&#xA;       , FOURTH_CMPNT_SK&#xD;&#xA;       , FIFTH_CMPNT_SK&#xD;&#xA;       , ADMN_ACTN_CDS_SK&#xD;&#xA;       , SCHED_ADMN_DT&#xD;&#xA;       , SCHED_ADMN_TS_SK&#xD;&#xA;       , ADMN_DT&#xD;&#xA;       , ADMN_TS_SK&#xD;&#xA;       , CRG_AMT&#xD;&#xA;       , RPRST_COST&#xD;&#xA;       , ACQSTN_COST&#xD;&#xA;       , MDCTN_REQ_SCAN_AT_ADMN_IND&#xD;&#xA;       , MDCTN_SCANNED_AT_ADMN_IND&#xD;&#xA;       , PTNT_REQ_SCAN_AT_ADMN_IND&#xD;&#xA;       , PTNT_SCANNED_AT_ADMN_IND&#xD;&#xA; FROM EDW_PRD.CUBESPRD.MDCTN_ADMN_FACT ma INNER JOIN CUBESPRD.MDCTN_ORDR_DIM mo ON ma.MDCTN_ORDR_SK=mo.MDCTN_ORDR_SK'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MedicationAdministrationActionDim'
set @FriendlyName='MedicationAdministrationActionDim'
set @xml='SELECT DISTINCT &#xD;&#xA;        ADMN_ACTN_CDS_SK&#xD;&#xA;       , ADMN_ACTN_DESC&#xD;&#xA;  FROM CUBESPRD.MDCTN_ADMN_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderDim'
set @FriendlyName='ProviderDim'
set @xml='SELECT     PROVDR_SK, PROVDR_NM_ID, PROVDR_TYPE_CDS, PRMY_SPCLY_CDS, PRMRY_DEPT_SK, PRMY_DEPT_CDS, NPI, DEA_NUM, UPIN, CLNC_TITL_CDS, MU_FLD_OF_PRACT_CDS, RPTNG_STRC_CDS, INTN_EXT_CDS, LDAP_USR, RSDNT_IND, HSPTLST_IND, &#xD;&#xA;                  PROVDR_ACTV_IND, Section_CDS, Section_Desc, PROVDR_TYPE_DESC, PRMY_SPCLY_DESC, PRMY_DEPT_NM, CLNC_TITL_DESC, MU_FLD_OF_PRACT_DESC, RPTNG_STRC_DESC, INTN_EXT_DESC&#xD;&#xA;FROM        cubesprd.PROVDR_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderClinicianTitleDim'
set @FriendlyName='ProviderClinicianTitleDim'
set @xml='SELECT DISTINCT &#xD;&#xA;CLNC_TITL_CDS, CLNC_TITL_DESC&#xD;&#xA;FROM CUBESPRD.PROVDR_DIM&#xD;&#xA;WHERE CLNC_TITL_CDS IS NOT NULL OR CLNC_TITL_CDS NOT IN (150,1790)'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderFieldOfPracticeDim'
set @FriendlyName='ProviderFieldOfPracticeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;&#x9;MU_FLD_OF_PRACT_CDS,&#xD;&#xA;&#x9;MU_FLD_OF_PRACT_DESC&#xD;&#xA;FROM CUBESPRD.PROVDR_DIM&#xD;&#xA;WHERE MU_FLD_OF_PRACT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderInternalExternalDim'
set @FriendlyName='ProviderInternalExternalDim'
set @xml='SELECT DISTINCT &#xD;&#xA;INTN_EXT_CDS, &#xD;&#xA;INTN_EXT_DESC &#xD;&#xA;FROM CUBESPRD.PROVDR_DIM&#xD;&#xA;WHERE INTN_EXT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderPrimaryDepartmentDim'
set @FriendlyName='ProviderPrimaryDepartmentDim'
set @xml='SELECT DISTINCT &#xD;&#xA;&#x9;PRMY_DEPT_CDS,&#xD;&#xA;&#x9;PRMY_DEPT_NM&#xD;&#xA;FROM CUBESPRD.PROVDR_DIM &#xD;&#xA;WHERE PRMY_DEPT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderReportingStructureDim'
set @FriendlyName='ProviderReportingStructureDim'
set @xml='SELECT DISTINCT &#xD;&#xA;RPTNG_STRC_CDS, &#xD;&#xA;RPTNG_STRC_DESC&#xD;&#xA;FROM CUBESPRD.PROVDR_DIM&#xD;&#xA;WHERE RPTNG_STRC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderTypeDim'
set @FriendlyName='ProviderTypeDim'
set @xml='SELECT DISTINCT &#xD;&#xA;       PROVDR_TYPE_CDS&#xD;&#xA;     , PROVDR_TYPE_DESC&#xD;&#xA;FROM CUBESPRD.PROVDR_DIM &#xD;&#xA;WHERE PROVDR_TYPE_CDS IS NOT NULL AND PROVDR_TYPE_CDS NOT IN (229,111,166)'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='UserDim'
set @FriendlyName='UserDim'
set @xml='SELECT CAST(USR_SK AS BIGINT) USR_SK&#xD;&#xA;       , NM||' ['||SRC_USR_ID||']' USER_NAME&#xD;&#xA;       , SRC_TYPE&#xD;&#xA;       , LDAP_USR&#xD;&#xA;       , SEX_CDS&#xD;&#xA;FROM CUBESPRD.USR_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='UserGenderDim'
set @FriendlyName='UserGenderDim'
set @xml='SELECT DISTINCT&#xD;&#xA;SEX_CDS,&#xD;&#xA;SEX_DESC&#xD;&#xA;FROM CUBESPRD.USR_DIM&#xD;&#xA;WHERE SEX_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabComponentDim'
set @FriendlyName='LabComponentDim'
set @xml='SELECT CMPNT_SK&#xD;&#xA;       , CMPNT_NM ||' (' ||SRC_CMPNT_ID ||')' COMP_NAME&#xD;&#xA;       , CMPNT_ABBR&#xD;&#xA;       , BAS_NM&#xD;&#xA;       , CMN_NM&#xD;&#xA;       , CMPNT_TYPE_CDS&#xD;&#xA;       , CMPNT_SUBT_CDS&#xD;&#xA;       , DFLT_UNT&#xD;&#xA;       , EXPCT_MIN_VAL&#xD;&#xA;       , EXPCT_MAX_VAL&#xD;&#xA;  FROM EDW_PRD.CUBESPRD.LAB_CMPNT_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabComponentResultFactResultFlagDim'
set @FriendlyName='LabComponentResultFactResultFlagDim'
set @xml='SELECT  DISTINCT R.RSLT_FLG_CD_SK, &#xD;&#xA;&#x9;CD_DESC&#xD;&#xA;  FROM EDW_PRD.DW.CMN_CD_DIM CD&#xD;&#xA;  INNER JOIN CUBESPRD.LAB_CMPNT_RSLT_FACT R ON R.RSLT_FLG_CD_SK = CD.CMN_CD_SK&#xD;&#xA; WHERE R.RSLT_FLG_CD_SK IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabComponentSubstrateDim'
set @FriendlyName='LabComponentSubstrateDim'
set @xml='SELECT DISTINCT &#xD;&#xA; &#x9; CMPNT_SUBT_CDS&#xD;&#xA;       , CMPNT_SUBT_NM&#xD;&#xA; FROM  EDW_PRD.CUBESPRD.LAB_CMPNT_DIM&#xD;&#xA;WHERE  &#x9; CMPNT_SUBT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabComponentTypeDim'
set @FriendlyName='LabComponentTypeDim'
set @xml='SELECT DISTINCT &#xD;&#xA;         CMPNT_TYPE_CDS&#xD;&#xA;       , CMPNT_TYPE_NM&#xD;&#xA;FROM EDW_PRD.CUBESPRD.LAB_CMPNT_DIM&#xD;&#xA;WHERE CMPNT_TYPE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabComponentResultFact'
set @FriendlyName='LabComponentResultFact'
set @xml='SELECT CMPNT_RSLT_FACT_SK&#xD;&#xA;       , SRC_CMPNT_RSLT_ID&#xD;&#xA;       , R.LAB_TST_SK&#xD;&#xA;       , R.PTNT_SK&#xD;&#xA;       , AUTH_PROVDR_SK&#xD;&#xA;       , PRCDR_CD_SK&#xD;&#xA;       , R.ENCNT_SK&#xD;&#xA;       , CASE WHEN RSULT_LAB_SK &lt; 0 OR RSULT_LAB_SK=1500001 THEN NULL ELSE RSULT_LAB_SK END RSULT_LAB_SK&#xD;&#xA;       , LAB_CMPNT_SK&#xD;&#xA;       , RSLT_FLG_CD_SK&#xD;&#xA;       , LAB_STS_CD_SK&#xD;&#xA;       , ORDRD_DT&#xD;&#xA;       , ORDRD_TS_SK&#xD;&#xA;       , CLCT_TS_SK&#xD;&#xA;       , CASE WHEN CLCT_DT &gt; NOW() THEN NULL ELSE  CLCT_DT END AS  CLCT_DT&#xD;&#xA;       , RSLT_DT&#xD;&#xA;       , RSLT_TS_SK&#xD;&#xA;       , RSLT_VAL_INTG&#xD;&#xA;       , RSLT_VAL_FLT&#xD;&#xA;       , RSLT_VAL_TXT&#xD;&#xA;       , REF_UNT&#xD;&#xA;       , REF_NRML_VAL&#xD;&#xA;       , REFN_LOW_VAL&#xD;&#xA;       , REFN_HI_VAL&#xD;&#xA;       , R.ABNRML_IND&#xD;&#xA;  FROM EDW_PRD.CUBESPRD.LAB_CMPNT_RSLT_FACT R  &#xD;&#xA; INNER JOIN CUBESPRD.PTNT_DIM P ON R.PTNT_SK = P.PTNT_SK&#xD;&#xA; INNER JOIN CUBESPRD.ENCNT_DIM E ON R.ENCNT_SK = E.ENCNT_SK  &#xD;&#xA; INNER JOIN DW.LAB_TST_DIM AS DLTD ON R.LAB_TST_SK= DLTD.LAB_TST_SK AND DLTD.ORDR_TYPE_CDS IN ('3','31','61','7')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabComponentResultFactLabStatusDim'
set @FriendlyName='LabComponentResultFactLabStatusDim'
set @xml='SELECT  DISTINCT R.LAB_STS_CD_SK, CD_DESC&#xD;&#xA;  FROM EDW_PRD.DW.CMN_CD_DIM CD&#xD;&#xA;  INNER JOIN CUBESPRD.LAB_CMPNT_RSLT_FACT R ON R.LAB_STS_CD_SK = CD.CMN_CD_SK&#xD;&#xA;WHERE R.LAB_STS_CD_SK IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabDim'
set @FriendlyName='LabDim'
set @xml='SELECT   LAB_SK&#xD;&#xA;       , LAB_NM ||' ('  || SRC_LAB_ID ||')' LAB_NAME&#xD;&#xA;       , LAB_ADDR&#xD;&#xA;       , LAB_CITY&#xD;&#xA;       , LAB_ST_CDS&#xD;&#xA;       , LAB_ST_ABBR&#xD;&#xA;       , LAB_PSTL_CDS&#xD;&#xA;  FROM EDW_PRD.CUBESPRD.LAB_DIM&#xD;&#xA;  WHERE LAB_SK &gt; 0 AND LAB_SK &lt;&gt; 1500001'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestCancellationReasonDim'
set @FriendlyName='LabTestCancellationReasonDim'
set @xml='SELECT DISTINCT&#xD;&#xA;CNCL_RSN_CDS, CNCL_RSN_DESC&#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM&#xD;&#xA;WHERE CNCL_RSN_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestDim'
set @FriendlyName='LabTestDim'
set @xml='SELECT LTD.LAB_TST_SK&#xD;&#xA;       , LTD.SRC_TST_ID&#xD;&#xA;       , LTD.RSULT_LAB_CDS&#xD;&#xA;       , LTD.TST_CDS&#xD;&#xA;       , LTD.ABNRML_LEVL_DESC&#xD;&#xA;       , LTD.VRFCTN_STS_CDS&#xD;&#xA;       , LTD.ORDR_PRTY_CDS&#xD;&#xA;       , LTD.ORDR_SRC_TYPE_CDS&#xD;&#xA;       , LTD.SPCMN_NM&#xD;&#xA;       , CASE WHEN LTD.SPCMN_TYPE_DESC='NOT_ENTERED' THEN NULL ELSE LTD.SPCMN_TYPE_CDS END AS SPCMN_TYPE_CDS&#xD;&#xA;       , LTD.SPCMN_SRC_CDS&#xD;&#xA;       , LTD.CNCL_RSN_CDS&#xD;&#xA;       , CASE WHEN LTD.HI_PRTY_IND = 0 THEN 'No' WHEN LTD.HI_PRTY_IND = 1 THEN 'Yes' ELSE NULL END HI_PRTY_IND&#xD;&#xA;       , CASE WHEN LTD.CORR_IND = 0 THEN 'No' WHEN LTD.CORR_IND = 1 THEN 'Yes' ELSE NULL END CORR_IND&#xD;&#xA;       , CASE WHEN LTD.CRTCL_IND = 0 THEN 'No' WHEN LTD.CRTCL_IND = 1 THEN 'Yes' ELSE NULL END CRTCL_IND&#xD;&#xA;       , CASE WHEN LTD.ABNRML_IND = 0 THEN 'No' WHEN LTD.ABNRML_IND = 1 THEN 'Yes' ELSE NULL END ABNRML_IND&#xD;&#xA;       , DLTD.ORDR_TYPE_CDS :: INT AS ORDR_TYPE_CDS&#xD;&#xA;  FROM CUBESPRD.LAB_TST_DIM LTD INNER JOIN DW.LAB_TST_DIM AS DLTD ON LTD.LAB_TST_SK= DLTD.LAB_TST_SK AND DLTD.ORDR_TYPE_CDS IN ('3','31','61','7')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestFact'
set @FriendlyName='LabTestFact'
set @xml='SELECT LAB_TST_FACT_SK&#xD;&#xA;       , LTF.SRC_TST_ID&#xD;&#xA;       , LTF.LAB_TST_SK&#xD;&#xA;       , LTF.PTNT_SK&#xD;&#xA;       , AUTH_PROVDR_SK&#xD;&#xA;       , PRCDR_CD_SK&#xD;&#xA;       , LTF.ENCNT_SK&#xD;&#xA;       , CASE WHEN RSULT_LAB_SK &lt; 0 OR RSULT_LAB_SK=1500001 THEN NULL ELSE RSULT_LAB_SK&#xD;&#xA; END AS RSULT_LAB_SK&#xD;&#xA;       , CASE WHEN YEAR(ORDRD_DT) = '1000' THEN NULL ELSE ORDRD_DT END ORDRD_DT&#xD;&#xA;       , ORDRD_TS_SK&#xD;&#xA;       , CLCT_USR_SK&#xD;&#xA;       , CLCT_DEPT_SK&#xD;&#xA;       , CASE WHEN (YEAR(CLCT_DT) &lt; 1900 OR YEAR(CLCT_DT) &gt; 2100) THEN NULL ELSE CLCT_DT END CLCT_DT&#xD;&#xA;       , CLCT_TS_SK&#xD;&#xA;       , CASE WHEN YEAR(SCHED_CLCT_DT) &lt; 1860 THEN NULL ELSE SCHED_CLCT_DT END SCHED_CLCT_DT&#xD;&#xA;       , SCHED_CLCT_TS_SK&#xD;&#xA;       , CASE WHEN YEAR(FRST_FNL_VRFY_DT) = '1000' THEN NULL ELSE FRST_FNL_VRFY_DT END FRST_FNL_VRFY_DT  &#xD;&#xA;       , FRST_FNL_VRFY_USR_SK&#xD;&#xA;       , CASE WHEN YEAR(FRST_VRFY_DT) = '1000' THEN NULL ELSE FRST_VRFY_DT END FRST_VRFY_DT&#xD;&#xA;       , FRST_VRFY_USR_SK&#xD;&#xA;       , CASE WHEN YEAR(LST_FNL_VRFY_DT) = '1000' THEN NULL ELSE LST_FNL_VRFY_DT END LST_FNL_VRFY_DT&#xD;&#xA;       , LST_FNL_VRFY_USR_SK&#xD;&#xA;       , CASE WHEN YEAR(LST_VRFY_DT) = '1000' THEN NULL ELSE LST_VRFY_DT END LST_VRFY_DT&#xD;&#xA;       , CASE WHEN YEAR(FRST_CORR_DT) = '1000' THEN NULL ELSE FRST_CORR_DT END FRST_CORR_DT&#xD;&#xA;       , FRST_CORR_USR_SK&#xD;&#xA;       , CASE WHEN YEAR(LST_CORR_DT) = '1000' THEN NULL ELSE LST_CORR_DT END LST_CORR_DT&#xD;&#xA;       , LST_CORR_USR_SK&#xD;&#xA;       , COLL_TM_MNT&#xD;&#xA;  FROM EDW_PRD.CUBESPRD.LAB_TST_FACT LTF INNER JOIN CUBESPRD.ENCNT_DIM E ON LTF.ENCNT_SK=E.ENCNT_SK INNER JOIN EDW_PRD.CUBESPRD.PTNT_DIM PD ON  LTF.PTNT_SK=PD.PTNT_SK&#xD;&#xA;  INNER JOIN DW.LAB_TST_DIM AS DLTD ON LTF.LAB_TST_SK= DLTD.LAB_TST_SK AND DLTD.ORDR_TYPE_CDS IN ('3','31','61','7')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestNameDim'
set @FriendlyName='LabTestNameDim'
set @xml='SELECT DISTINCT &#xD;&#xA;&#x9;TST_CDS,&#x9; &#xD;&#xA;&#x9;TST_NM ||' (' ||TST_CDS ||')' TEST_NAME&#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestOrderPriorityDim'
set @FriendlyName='LabTestOrderPriorityDim'
set @xml='SELECT DISTINCT ORDR_PRTY_CDS, ORDR_PRTY_DESC&#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM&#xD;&#xA;WHERE ORDR_PRTY_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestOrderSourceTypeDim'
set @FriendlyName='LabTestOrderSourceTypeDim'
set @xml='SELECT DISTINCT ORDR_SRC_TYPE_CDS, ORDR_SRC_TYPE_DESC&#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM&#xD;&#xA;WHERE ORDR_SRC_TYPE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestSpecimenSourceDim'
set @FriendlyName='LabTestSpecimenSourceDim'
set @xml='SELECT DISTINCT&#xD;&#xA;SPCMN_SRC_CDS, SPCMN_SRC_DESC &#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM&#xD;&#xA;WHERE SPCMN_SRC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestSpecimenTypeDim'
set @FriendlyName='LabTestSpecimenTypeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;SPCMN_TYPE_CDS, SPCMN_TYPE_DESC&#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM&#xD;&#xA;WHERE SPCMN_TYPE_CDS IS NOT NULL AND SPCMN_TYPE_DESC &lt;&gt; 'NOT_ENTERED''
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestVerificationStatusDim'
set @FriendlyName='LabTestVerificationStatusDim'
set @xml='SELECT DISTINCT VRFCTN_STS_CDS, VRFCTN_STS_DESC&#xD;&#xA;FROM CUBESPRD.LAB_TST_DIM&#xD;&#xA;WHERE  VRFCTN_STS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderAffiliationDim'
set @FriendlyName='ProviderAffiliationDim'
set @xml='SELECT DISTINCT INTN_EXT_CDS, INTN_EXT_DESC &#xD;&#xA;FROM CUBESPRD.PROVDR_DIM&#xD;&#xA;WHERE INTN_EXT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='ProviderPrimarySpecialtyDim'
set @FriendlyName='ProviderPrimarySpecialtyDim'
set @xml='SELECT DISTINCT &#xD;&#xA;        PRMY_SPCLY_CDS&#xD;&#xA;       , PRMY_SPCLY_DESC&#xD;&#xA;FROM CUBESPRD.PROVDR_DIM WHERE SUBSTR(PRMY_SPCLY_DESC,1,1) &lt;&gt; 'X''
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='qps_DM_Quality'
set @FriendlyName='DM_Quality_Fact'
set @xml='SELECT     Data_ID, LO_CDS, SRC_DEPT_ID, Truven_Indicator, Source_Source_Measure_ID, Source_Measure_Title, Frequency, [Date], Result&#xD;&#xA;FROM        qps.DM_Quality_Fact'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='qps_Dim_Measure'
set @FriendlyName='MeasureDim'
set @xml='SELECT     Measure_Dim_ID, Source_ID, Source_Measure_ID, Measure, Is_Active&#xD;&#xA;FROM        qps.Dim_Measure'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='qps_Dim_Measure_Group'
set @FriendlyName='MeasureGroupDim'
set @xml='SELECT     Measure_Group_Dim_ID, Measure_Group_ID, Glossary_Link&#xD;&#xA;FROM        qps.Dim_Measure_Group'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='QualityMeasureSourceDim'
set @FriendlyName='MeasureSourceDim'
set @xml='SELECT     Source_ID, Source_Name&#xD;&#xA;FROM        qps.Dim_Source'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='qps_Dim_Program'
set @FriendlyName='ProgramDim'
set @xml='SELECT     Program_ID, Program_Name, Start_Date, End_Date, Is_Active&#xD;&#xA;FROM        qps.Dim_Program'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MeasureMDFact'
set @FriendlyName='MeasureMDFact'
set @xml='SELECT     Data_ID, Source_Source_Measure_ID AS Measure_Dim_ID, YEAR([Date]) * 100 + MONTH([Date]) AS Meaure_Month, Result, SRC_DEPT_ID&#xD;&#xA;FROM        qps.DM_Quality_Fact&#xD;&#xA;WHERE     (SRC_DEPT_ID IS NOT NULL) AND (Frequency = N'Monthly')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MeasureMLFact'
set @FriendlyName='MeasureMLFact'
set @xml='SELECT     Data_ID, Source_Source_Measure_ID AS Measure_Dim_ID, YEAR([Date]) * 100 + MONTH([Date]) AS Meaure_Month, Result, LO_CDS&#xD;&#xA;FROM        qps.DM_Quality_Fact&#xD;&#xA;WHERE     (LO_CDS IS NOT NULL) AND (Frequency = N'Monthly')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MeasureQLFact'
set @FriendlyName='MeasureQLFact'
set @xml='SELECT     Data_ID, Source_Source_Measure_ID AS Measure_Dim_ID, YEAR([Date]) * 10 + DATEPART(Quarter, [Date]) AS Meaure_Quarter, Result, LO_CDS&#xD;&#xA;FROM        qps.DM_Quality_Fact&#xD;&#xA;WHERE     (LO_CDS IS NOT NULL) AND (Frequency = N'Quarterly')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='MeasureQDFact'
set @FriendlyName='MeasureQDFact'
set @xml='SELECT     Data_ID, Source_Source_Measure_ID AS Measure_Dim_ID, YEAR([Date]) * 10 + DATEPART(Quarter, [Date]) AS Meaure_Quarter, Result, SRC_DEPT_ID&#xD;&#xA;FROM        qps.DM_Quality_Fact&#xD;&#xA;WHERE     (SRC_DEPT_ID IS NOT NULL) AND (Frequency = N'Quarterly')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SugicalProcedureEventWoundClassDim'
set @FriendlyName='SugicalProcedureEventWoundClassDim'
set @xml='SELECT DISTINCT &#xD;&#xA;WND_CLASS_CDS&#xD;&#xA;       , WND_CLASS_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_PRCDR_EV_FACT&#xD;&#xA;WHERE WND_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCaseClassDim'
set @FriendlyName='SurgicalCaseClassDim'
set @xml='SELECT DISTINCT&#xD;&#xA;         CL_CDS&#xD;&#xA;       , CL_DESC&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM &#xD;&#xA;WHERE CL_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCaseDim'
set @FriendlyName='SurgicalCaseDim'
set @xml='SELECT  D.CASE_SK&#xD;&#xA;       , PRMY_SRVC_CDS&#xD;&#xA;       , PRCDR_LEVL_CDS&#xD;&#xA;       , CL_CDS&#xD;&#xA;       , SRG_PTNT_CLASS_CDS&#xD;&#xA;       , PRMY_ANSTH_TYPE_CDS&#xD;&#xA;       , RSN_NOT_PRFRM_CDS&#xD;&#xA;&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM D'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCaseFact'
set @FriendlyName='SurgicalCaseFact'
set @xml='SELECT SRGCL_CASE_FACT_SK&#xD;&#xA;       , CF.CASE_SK&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , PRMY_PROVDR_SK&#xD;&#xA;       , ANSTHGIST_PROVDR_SK&#xD;&#xA;       , PRMY_PRCDR_CD_SK&#xD;&#xA;       , DEPT_SK&#xD;&#xA;       , DIAG_CD_SK&#xD;&#xA;       , CASE WHEN CF.HSPTL_ENCNT_SK &lt; 0 THEN NULL ELSE CF.HSPTL_ENCNT_SK END AS HSPTL_ENCNT_SK&#xD;&#xA;       , SRG_ENCNT_SK&#xD;&#xA;       , SRG_DT&#xD;&#xA;       , CASE_RQST_DT&#xD;&#xA;       , CASE_RQST_TM_SK&#xD;&#xA;       , SCHED_SETUP_STRT_DT&#xD;&#xA;       , SCHED_SETUP_STRT_TM_SK&#xD;&#xA;       , SCHED_IN_RM_DT&#xD;&#xA;       , SCHED_IN_RM_TM_SK&#xD;&#xA;       , SCHED_OUT_OF_RM_DT&#xD;&#xA;       , SCHED_OUT_OF_RM_TM_SK&#xD;&#xA;       , SCHED_CLNUP_CMPLT_DT&#xD;&#xA;       , SCHED_CLNUP_CMPLT_TM_SK&#xD;&#xA;       , PTNT_IN_FCLT_DT&#xD;&#xA;       , PTNT_IN_FCLT_TM_SK&#xD;&#xA;       , PTNT_IN_PRE_PRCDR_DT&#xD;&#xA;       , PTNT_IN_PRE_PRCDR_TM_SK&#xD;&#xA;       , RM_SETUP_STRT_DT&#xD;&#xA;       , RM_SETUP_STRT_TM_SK&#xD;&#xA;       , RM_RDY_DT&#xD;&#xA;       , RM_RDY_TM_SK&#xD;&#xA;       , ANSTH_STRT_DT&#xD;&#xA;       , ANSTH_STRT_TM_SK&#xD;&#xA;       , PRE_PRCDR_CMPLT_DT&#xD;&#xA;       , PRE_PRCDR_CMPLT_TM_SK&#xD;&#xA;       , PTNT_IN_RM_DT&#xD;&#xA;       , PTNT_IN_RM_TM_SK&#xD;&#xA;       , ANSTH_RDY_DT&#xD;&#xA;       , ANSTH_RDY_TM_SK&#xD;&#xA;       , PRCDR_STRT_DT&#xD;&#xA;       , PRCDR_STRT_TM_SK&#xD;&#xA;       , PRCDR_CMPLT_DT&#xD;&#xA;       , PRCDR_CMPLT_TM_SK&#xD;&#xA;       , PTNT_OUT_OF_RM_DT&#xD;&#xA;       , PTNT_OUT_OF_RM_TM_SK&#xD;&#xA;       , RM_CLNUP_STRT_DT&#xD;&#xA;       , RM_CLNUP_STRT_TM_SK&#xD;&#xA;       , RM_CLNUP_CMPLT_DT&#xD;&#xA;       , RM_CLNUP_CMPLT_TM_SK&#xD;&#xA;       , PTNT_IN_PACU_DT&#xD;&#xA;       , PTNT_IN_PACU_TM_SK&#xD;&#xA;       , ANSTH_STOP_DT&#xD;&#xA;       , ANSTH_STOP_TM_SK&#xD;&#xA;       , PACU_CARE_CMPLT_DT&#xD;&#xA;       , PACU_CARE_CMPLT_TM_SK&#xD;&#xA;       , PTNT_OUT_OF_PACU_DT&#xD;&#xA;       , PTNT_OUT_OF_PACU_TM_SK&#xD;&#xA;       , PTNT_POST_OP_DT&#xD;&#xA;       , PTNT_POST_OP_TM_SK&#xD;&#xA;       , POST_OP_CARE_CMPLT_DT&#xD;&#xA;       , POST_OP_CARE_CMPLT_TM_SK&#xD;&#xA;       , PTNT_OUT_OF_POST_OP_DT&#xD;&#xA;       , PTNT_OUT_OF_POST_OP_TM_SK&#xD;&#xA;       , CNCL_IND&#xD;&#xA;       , ADD_ON_IND&#xD;&#xA;       , CNFD_IND&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_FACT CF INNER JOIN CUBESPRD.SRGCL_CASE_DIM CD ON CF.CASE_SK=CD.CASE_SK INNER JOIN CUBESPRD.ENCNT_DIM ED ON CF.SRG_ENCNT_SK=ED.ENCNT_SK'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCasePatientClassDim'
set @FriendlyName='SurgicalCasePatientClassDim'
set @xml='SELECT DISTINCT&#xD;&#xA;        SRG_PTNT_CLASS_CDS&#xD;&#xA;       , SRG_PTNT_CLASS_DESC&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM &#xD;&#xA;WHERE SRG_PTNT_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCasePrimaryAnesthesiaTypeDim'
set @FriendlyName='SurgicalCasePrimaryAnesthesiaTypeDim'
set @xml='SELECT DISTINCT&#xD;&#xA;         PRMY_ANSTH_TYPE_CDS&#xD;&#xA;       , PRMY_ANSTH_TYPE_DESC&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM &#xD;&#xA;WHERE PRMY_ANSTH_TYPE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCasePrimaryServiceDim'
set @FriendlyName='SurgicalCasePrimaryServiceDim'
set @xml='SELECT DISTINCT&#xD;&#xA;         PRMY_SRVC_CDS&#xD;&#xA;       , PRMY_SRVC_DESC&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM &#xD;&#xA;WHERE PRMY_SRVC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCaseProcedureLevelDim'
set @FriendlyName='SurgicalCaseProcedureLevelDim'
set @xml='SELECT DISTINCT&#xD;&#xA;         PRCDR_LEVL_CDS&#xD;&#xA;       , PRCDR_LEVL_DESC&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM &#xD;&#xA;WHERE PRCDR_LEVL_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalCaseReasonNotPerformedDim'
set @FriendlyName='SurgicalCaseReasonNotPerformedDim'
set @xml='SELECT DISTINCT&#xD;&#xA;         RSN_NOT_PRFRM_CDS&#xD;&#xA;       , RSN_NOT_PRFRM_DESC&#xD;&#xA;  FROM CUBESPRD.SRGCL_CASE_DIM &#xD;&#xA;WHERE RSN_NOT_PRFRM_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalProcedureEventAnesthesiaTypeDim'
set @FriendlyName='SurgicalProcedureEventAnesthesiaTypeDim'
set @xml='SELECT DISTINCT &#xD;&#xA; ANSTH_TYPE_CDS&#xD;&#xA;       , ANSTH_TYPE_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_PRCDR_EV_FACT&#xD;&#xA;WHERE ANSTH_TYPE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalProcedureEventFact'
set @FriendlyName='SurgicalProcedureEventFact'
set @xml='SELECT SRG_PRCDR_EV_FACT_SK&#xD;&#xA;       , SPE.PTNT_SK&#xD;&#xA;       , SPE.CASE_SK&#xD;&#xA;       , PRCDR_CD_SK&#xD;&#xA;       , PRMY_PROVDR_SURGEON_SK&#xD;&#xA;       , SCND_PROVDR_SURGEON_SK&#xD;&#xA;       , THRD_PROVDR_SURGEON_SK&#xD;&#xA;       , SCF.SRG_DT&#xD;&#xA;       , SPE.HSPTL_ENCNT_SK&#xD;&#xA;       , SPE.SRG_ENCNT_SK&#xD;&#xA;       , CASE WHEN SPE.DEPT_SK &lt; 0 THEN NULL ELSE SPE.DEPT_SK END AS DEPT_SK&#xD;&#xA;       , SRVC_CDS&#xD;&#xA;       , PRCDR_SITE_CDS&#xD;&#xA;       , LTRLTY_CDS&#xD;&#xA;       , ANSTH_TYPE_CDS&#xD;&#xA;       , WND_CLASS_CDS&#xD;&#xA;       , SCHED_IND&#xD;&#xA;       , PRFRM_IND&#xD;&#xA;       , PSSBL_IND&#xD;&#xA;  FROM CUBESPRD.SRGCL_PRCDR_EV_FACT SPE INNER JOIN CUBESPRD.SRGCL_CASE_FACT SCF ON SPE.CASE_SK=SCF.CASE_SK'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalProcedureEventLateralityDim'
set @FriendlyName='SurgicalProcedureEventLateralityDim'
set @xml='SELECT DISTINCT&#xD;&#xA;LTRLTY_CDS&#xD;&#xA;       , CASE WHEN LTRLTY_DESC='N/A' THEN 'Not Applicable' ELSE LTRLTY_DESC END AS LTRLTY_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_PRCDR_EV_FACT&#xD;&#xA;WHERE LTRLTY_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalProcedureEventProcedureSiteDim'
set @FriendlyName='SurgicalProcedureEventProcedureSiteDim'
set @xml='SELECT DISTINCT&#xD;&#xA;PRCDR_SITE_CDS&#xD;&#xA;       , PRCDR_SITE_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_PRCDR_EV_FACT&#xD;&#xA;WHERE PRCDR_SITE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalProcedureEventServiceDim'
set @FriendlyName='SurgicalProcedureEventServiceDim'
set @xml='SELECT DISTINCT &#xD;&#xA; SRVC_CDS&#xD;&#xA;       , SRVC_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_PRCDR_EV_FACT&#xD;&#xA;WHERE SRVC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalSupplyDim'
set @FriendlyName='SurgicalSupplyDim'
set @xml='SELECT SPPLY_SK&#xD;&#xA;       , SPPLY_NM || ' ('  ||SRC_SPPLY_ID||')'       AS SPPLY_NM&#xD;&#xA;       , SPPLY_TYPE_CDS&#xD;&#xA;       , MNFCTR_CDS&#xD;&#xA;       , MNFCTR_CTLG_NBR&#xD;&#xA;       , VND_CDS&#xD;&#xA;       , VND_CTLG_NBR&#xD;&#xA;       , CASE WHEN IMPLNT_IND = 1 THEN 'Yes' WHEN IMPLNT_IND = 0 THEN 'No' ELSE NULL END AS IMPLNT_IND&#xD;&#xA;  FROM CUBESPRD.SRGCL_SPPLY_DIM'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalSupplyManufacturerDim'
set @FriendlyName='SurgicalSupplyManufacturerDim'
set @xml='SELECT DISTINCT &#xD;&#xA;         MNFCTR_CDS&#xD;&#xA;       , MNFCTR_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_SPPLY_DIM&#xD;&#xA;WHERE MNFCTR_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalSupplyUseFact'
set @FriendlyName='SurgicalSupplyUseFact'
set @xml='SELECT  SRGCL_SPPLY_USE_FACT_SK&#xD;&#xA;       , SRC_SRGCL_SPPLY_ID&#xD;&#xA;       , PTNT_SK&#xD;&#xA;       , CASE_SK&#xD;&#xA;       , SPPLY_SK&#xD;&#xA;       , DEPT_SK&#xD;&#xA;       , SRG_DT&#xD;&#xA;       , HSPTL_ENCNT_SK&#xD;&#xA;       , SRG_ENCNT_SK&#xD;&#xA;       , PRMY_PROVDR_SK&#xD;&#xA;       , PRCDR_CD_SK&#xD;&#xA;       , LOG_STS_CDS&#xD;&#xA;       , OR_SRVC_CDS&#xD;&#xA;       , NBR_USE&#xD;&#xA;       , NBR_WSTD&#xD;&#xA;       , NBR_OPEN&#xD;&#xA;       , NBR_PRN&#xD;&#xA;       , UNT_COST&#xD;&#xA;       , CRGBL_IND&#xD;&#xA;  FROM CUBESPRD.SRGCL_SPPLY_USE_FACT'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalSupplyUseLogStatusDim'
set @FriendlyName='SurgicalSupplyUseLogStatusDim'
set @xml='SELECT DISTINCT &#xD;&#xA;  LOG_STS_CDS,&#xD;&#xA;  LOG_STS_DESC&#xD;&#xA;FROM CUBESPRD.MV_SRGCL_SPPLY_USE_FACT&#xD;&#xA;WHERE LOG_STS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalSupplyUseORServiceDim'
set @FriendlyName='SurgicalSupplyUseORServiceDim'
set @xml='SELECT DISTINCT &#xD;&#xA;  OR_SRVC_CDS,&#xD;&#xA;  OR_SRVC_DESC&#xD;&#xA;FROM CUBESPRD.MV_SRGCL_SPPLY_USE_FACT&#xD;&#xA;WHERE OR_SRVC_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='SurgicalSupplyVendorDim'
set @FriendlyName='SurgicalSupplyVendorDim'
set @xml='SELECT DISTINCT &#xD;&#xA;  VND_CDS&#xD;&#xA;       , VND_DESC&#xD;&#xA;FROM CUBESPRD.SRGCL_SPPLY_DIM&#xD;&#xA;WHERE VND_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncounterProductLineDim'
set @FriendlyName='EncounterProductLineDim'
set @xml='SELECT DISTINCT &#xD;&#xA;PRD_LINE_CDS,&#xD;&#xA;PROD_LINE_DESC&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM WHERE PRD_LINE_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncounterDepartmentDim'
set @FriendlyName='EncounterDepartmentDim'
set @xml='SELECT DISTINCT &#xD;&#xA;DEPT_CDS,&#xD;&#xA;DEPT_DESC&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM WHERE DEPT_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='EncounterBillingClassDim'
set @FriendlyName='EncounterBillingClassDim'
set @xml='SELECT DISTINCT &#xD;&#xA;BILLING_CLASS_CDS,&#xD;&#xA;BILLING_CLASS_DESC&#xD;&#xA;FROM CUBESPRD.ENCNT_DIM WHERE BILLING_CLASS_CDS IS NOT NULL'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)

--*************************************************
--*************************************************
set @ElementName='LabTestOrderType'
set @FriendlyName='LabTestOrderTypeDim'
set @xml='SELECT DISTINCT &#xD;&#xA;       ORDR_TYPE_CDS :: INT AS ORDR_TYPE_CDS, ORDR_TYPE_DESC&#xD;&#xA;  FROM DW.LAB_TST_DIM WHERE ORDR_TYPE_CDS IN ('3','31','61','7')'
set @query = @xml
--set @query = (select cast(@xml as XML).value('.[1]','nvarchar(max)' ));
set @select = concat(N'SELECT * FROM OPENQUERY(EDW,''', @query, ''')')
insert into [RAF].dbo.TableSchemas
SELECT @ElementName, @FriendlyName, * FROM sys.dm_exec_describe_first_result_set(@select, null, 0)


--*************************************************
--*************************************************


select * from [RAF].dbo.TableSchemas

